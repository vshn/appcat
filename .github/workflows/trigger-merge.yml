name: PR Smart Merge Trigger

on:
  issue_comment:
    types:
      - created

env:
  COMPONENT_REPO: zugao/component-appcat
  APPCAT_REPO: zugao/appcat

jobs:
  smart-merge:
    if: |
      github.event.issue.pull_request &&
      github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.COMPONENT_ACCESS_TOKEN }}  # Token with access to appcat & component
    steps:
      - name: Comment with workflow run link
        run: |
          gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -f body="üîó [Workflow run triggered by this comment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get base branch of PR
        id: get-base
        run: |
          PR_BASE=$(gh pr view ${{ github.event.issue.number }} --repo "$APPCAT_REPO" --json baseRefName -q .baseRefName)
          echo "base=$PR_BASE" >> "$GITHUB_OUTPUT"

      - name: Exit if base is not develop
        if: steps.get-base.outputs.base != 'develop'
        run: |
          echo "Base branch is '${{ steps.get-base.outputs.base }}', not 'develop'. Skipping job."
          exit 1

      - name: Get PR metadata
        id: get-pr
        run: |
          BRANCH=$(gh pr view ${{ github.event.issue.number }} --repo "$APPCAT_REPO" --json headRefName -q .headRefName)
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "id=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Check approvals on appcat PR
        run: |
          APPROVED=$(gh pr view "${{ github.event.issue.number }}" --repo "$APPCAT_REPO" --json reviews -q '.reviews | map(select(.state == "APPROVED")) | length')
          if [ "$APPROVED" -eq 0 ]; then
            echo "‚ùå PR in appcat is not approved"
            exit 1
          fi

      - name: Check required status checks on appcat PR
        run: |
          PR_SHA=$(gh pr view  "${{ github.event.issue.number }}" --repo "$APPCAT_REPO" --json headRefOid -q '.headRefOid')
          REPO="${{ github.repository }}"
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)

          PASSED=$(gh api repos/$OWNER/$REPO_NAME/commits/$PR_SHA/check-runs -H "Accept: application/vnd.github.v3+json" --jq '[.check_runs[].conclusion] | all(. == "success" or . == "skipped")')

          if [ "$PASSED" != "true" ]; then
            echo "‚ùå Required status checks did not pass"
            exit 1
          fi

      - name: Check for merge conflicts on appcat PR
        id: check-conflicts
        run: |
          PR_SHA=$(gh pr view  "${{ github.event.issue.number }}" --repo "$APPCAT_REPO" --json headRefOid -q '.headRefOid')
          REPO="${{ github.repository }}"
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)

          MERGEABLE=$(gh api repos/$OWNER/$REPO_NAME/pulls/${{ github.event.issue.number }} --jq '.mergeable')
          
          if [ "$MERGEABLE" != "true" ]; then
            echo "‚ùå Pull request has merge conflicts!"
            exit 1
          fi
          
          echo "‚úÖ Pull request is mergeable"

      - name: Find PR in component repo
        id: find-component-pr
        run: |
          COMPONENT_BRANCH="appcat/${{ steps.get-pr.outputs.id }}/${{ steps.get-pr.outputs.branch }}"
          PR_JSON=$(gh pr list --repo "$COMPONENT_REPO" -H "$COMPONENT_BRANCH" --state open --json number,headRefName,mergeable,url)
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.[0].number')
          PR_URL=$(echo "$PR_JSON" | jq -r '.[0].url')
          MERGEABLE=$(echo "$PR_JSON" | jq -r '.[0].mergeable')

          if [ "$PR_NUMBER" == "null" ]; then
            echo "‚ùå No matching PR in component repo for branch $COMPONENT_BRANCH"
            exit 1
          fi

          if [ "$MERGEABLE" != "MERGEABLE" ]; then
            echo "‚ùå PR in component is not mergeable: $PR_URL"
            exit 1
          fi

          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "url=$PR_URL" >> $GITHUB_OUTPUT
          echo "branch=$COMPONENT_BRANCH" >> $GITHUB_OUTPUT

      - name: Check if component PR is approved
        run: |
          APPROVED=$(gh pr view ${{ steps.find-component-pr.outputs.number }} --repo "$COMPONENT_REPO" --json reviews -q '.reviews | map(select(.state == "APPROVED")) | length')
          if [ "$APPROVED" -eq 0 ]; then
            echo "‚ùå Component PR not approved: ${{ steps.find-component-pr.outputs.url }}"
            exit 1
          fi

      - name: Clone and patch component repo
        run: |
          COMPONENT_BRANCH="appcat/${{ steps.get-pr.outputs.id }}/${{ steps.get-pr.outputs.branch }}"
          APPCAT_FR_COMMIT_SHA=$(gh api repos/${{ github.repository }}/commits/${{ steps.get-pr.outputs.branch }} --jq .sha)
          
          git clone https://x-access-token:$GH_TOKEN@github.com/"$COMPONENT_REPO".git
          cd component-appcat
          git checkout "$COMPONENT_BRANCH"

          yq e ".parameters.appcat.images.appcat.tag = \"$APPCAT_FR_COMMIT_SHA\"" class/defaults.yml | diff -B class/defaults.yml - | patch class/defaults.yml -

          make gen-golden-all

          git config --global user.email "githubbot@vshn.ch"
          git config --global user.name "GitHubBot"
          git add .
          git commit -m "Auto update from appcat PR #${{ steps.get-pr.outputs.id }}, dependency $APPCAT_FR_COMMIT_SHA"
          git push origin "$COMPONENT_BRANCH"
          
          # wait for GitHub to recalculate merge status
          sleep 5

      - name: Merge PR in component repo
        run: |
          gh pr merge -R "$COMPONENT_REPO" ${{ steps.find-component-pr.outputs.number }} --merge --delete-branch

      - name: Merge PR in appcat repo
        run: |
          gh pr merge ${{ github.event.issue.pull_request.url }} --merge --delete-branch

