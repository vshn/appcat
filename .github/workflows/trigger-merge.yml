name: Smart Merge Dispatcher

on:
  issue_comment:
    types: [created]


env:
  COMPONENT_REPO: zugao/component-appcat
  APPCAT_REPO: zugao/appcat

jobs:
  check-conditions:
    if: github.event.issue.pull_request && github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    outputs:
      is-hotfix: ${{ steps.check.outputs.is-hotfix }}
      base-branch: ${{ steps.check.outputs.base }}
      feature-branch: ${{ steps.check.outputs.branch }}
      last-sha: ${{ steps.check.outputs.sha }}
      pr-number: ${{ steps.check.outputs.number }}
    steps:
      - name: Comment with workflow run link
        run: |
          gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -f body="üîó [Workflow run triggered by this comment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR metadata
        id: check
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          PR_DATA=$(gh pr view "$PR_NUMBER" --repo "${{ github.repository }}" --json title,labels,baseRefName,headRefName,headRefOid)

          TITLE=$(echo "$PR_DATA" | jq -r '.title')
          LABELS=$(echo "$PR_DATA" | jq -r '[.labels[].name]')
          BASE=$(echo "$PR_DATA" | jq -r '.baseRefName')
          BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          SHA=$(echo "$PR_DATA" | jq -r '.headRefOid')

          # Check for hotfix in title or labels
          if echo "$TITLE" | grep -i 'hotfix' > /dev/null || echo "$LABELS" | grep -i 'hotfix' > /dev/null; then
            echo "is-hotfix=true" >> "$GITHUB_OUTPUT"
          else
            echo "is-hotfix=false" >> "$GITHUB_OUTPUT"
          fi

          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  merge-feature:
    needs: check-conditions
    if: needs.check-conditions.outputs.base-branch == 'develop' && needs.check-conditions.outputs.is-hotfix == 'false'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.COMPONENT_ACCESS_TOKEN }}
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Check approvals on appcat PR
        run: |
          APPROVED=$(gh pr view "${{ github.event.issue.number }}" --repo "$APPCAT_REPO" --json reviews -q '.reviews | map(select(.state == "APPROVED")) | length')
          if [ "$APPROVED" -eq 0 ]; then
            echo "‚ùå PR in appcat is not approved"
            exit 1
          fi

      - name: Check required status checks on appcat PR
        run: |
          PASSED=$(gh api repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/commits/${{ needs.check-conditions.outputs.last-sha }}/check-runs \
            -H "Accept: application/vnd.github.v3+json" \
            --jq '[.check_runs[].conclusion] | all(. == "success" or . == "skipped")')

          if [ "$PASSED" != "true" ]; then
            echo "‚ùå Required status checks did not pass"
            exit 1
          fi

      - name: Check for merge conflicts on appcat PR
        id: check-conflicts
        run: |
          MERGEABLE=$(gh pr view ${{ github.event.issue.number }} --repo "$APPCAT_REPO" --json mergeable -q .mergeable)
          if [ "$MERGEABLE" != "MERGEABLE" ]; then
            echo "‚ùå Pull request has merge conflicts!"
            exit 1
          fi
          echo "‚úÖ Pull request is mergeable"

      - name: Find PR in component repo
        id: find-component-pr
        run: |
          COMPONENT_BRANCH="appcat/${{ needs.check-conditions.outputs.pr-number }}/${{ needs.check-conditions.outputs.feature-branch }}"
          PR_JSON=$(gh pr list --repo "$COMPONENT_REPO" --head "$COMPONENT_BRANCH" --state open --json number,headRefName,mergeable,url)
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.[0].number')
          PR_URL=$(echo "$PR_JSON" | jq -r '.[0].url')
          MERGEABLE=$(echo "$PR_JSON" | jq -r '.[0].mergeable')

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
            echo "‚ùå No matching PR in component repo for branch $COMPONENT_BRANCH"
            exit 1
          fi

          if [ "$MERGEABLE" != "MERGEABLE" ]; then
            echo "‚ùå PR in component is not mergeable: $PR_URL"
            exit 1
          fi

          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "url=$PR_URL" >> $GITHUB_OUTPUT
          echo "branch=$COMPONENT_BRANCH" >> $GITHUB_OUTPUT

      - name: Check if component PR is approved
        run: |
          APPROVED=$(gh pr view ${{ steps.find-component-pr.outputs.number }} --repo "$COMPONENT_REPO" --json reviews -q '.reviews | map(select(.state == "APPROVED")) | length')
          if [ "$APPROVED" -eq 0 ]; then
            echo "‚ùå Component PR not approved: ${{ steps.find-component-pr.outputs.url }}"
            exit 1
          fi

      - name: Clone and patch component repo
        run: |
          COMPONENT_BRANCH="${{ steps.find-component-pr.outputs.branch }}"
          APPCAT_FR_COMMIT_SHA="${{ needs.check-conditions.outputs.last-sha }}"
          echo "üîß Using commit: $APPCAT_FR_COMMIT_SHA"
          echo "üîß Cloning branch: $COMPONENT_BRANCH"

          git clone https://x-access-token:$GH_TOKEN@github.com/"$COMPONENT_REPO".git
          cd component-appcat
          git checkout "$COMPONENT_BRANCH"

          echo "üîß Patching class/defaults.yml..."
          yq e ".parameters.appcat.images.appcat.tag = \"$APPCAT_FR_COMMIT_SHA\"" class/defaults.yml \
            | diff -B class/defaults.yml - \
            | patch class/defaults.yml - || echo "‚úÖ No patch needed"

          make gen-golden-all

          git config --global user.email "githubbot@vshn.ch"
          git config --global user.name "GitHubBot"

          git add .
          if git diff --cached --quiet; then
            echo "‚úÖ No changes to commit"
          else
            git commit -m "Auto update from appcat PR #${{ needs.check-conditions.outputs.pr-number }}, dependency $APPCAT_FR_COMMIT_SHA"
            git push origin "$COMPONENT_BRANCH"
          fi

      - name: Retry mergeable check (GitHub race fix)
        run: |
          for i in {1..5}; do
            MERGEABLE=$(gh pr view ${{ steps.find-component-pr.outputs.number }} --repo "$COMPONENT_REPO" --json mergeable -q .mergeable)
            echo "Mergeable state: $MERGEABLE"
            if [ "$MERGEABLE" == "MERGEABLE" ]; then
              break
            fi
            echo "üîÅ Waiting for GitHub to refresh mergeability..."
            sleep 3
          done

      - name: Merge PR in component repo
        run: |
          echo "‚úÖ Merging component PR: ${{ steps.find-component-pr.outputs.url }}"
          gh pr merge -R "$COMPONENT_REPO" ${{ steps.find-component-pr.outputs.number }} --merge --delete-branch

      - name: Merge PR in appcat repo
        run: |
          echo "‚úÖ Merging appcat PR: https://github.com/$APPCAT_REPO/pull/${{ github.event.issue.number }}"
          gh pr merge -R "$APPCAT_REPO" ${{ github.event.issue.number }} --merge --delete-branch
