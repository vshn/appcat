// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package v1

// SGClusterSpec defines model for SGClusterSpec.
type SGClusterSpec struct {
	// Cluster custom configurations.
	Configurations *SGClusterSpecConfigurations `json:"configurations,omitempty"`

	// StackGres features a functionality for all pods to send Postgres, Patroni and PgBouncer logs to a central (distributed) location, which is in turn another Postgres database. Logs can then be accessed via SQL interface or from the web UI. This section controls whether to enable this feature or not. If not enabled, logs are send to the pod's standard output.
	DistributedLogs *SGClusterSpecDistributedLogs `json:"distributedLogs,omitempty"`

	// Cluster initialization data options. Cluster may be initialized empty, or from a backup restoration. Specifying scripts to run on the database after cluster creation is also possible.
	InitialData *SGClusterSpecInitialData `json:"initialData,omitempty"`

	// Number of StackGres instances for the cluster. Each instance contains one Postgres server.
	//  Out of all of the Postgres servers, one is elected as the primary, the rest remain as read-only replicas.
	Instances int `json:"instances"`

	// This section allows to reference SQL scripts that will be applied to the cluster live.
	ManagedSql *SGClusterSpecManagedSql `json:"managedSql,omitempty"`

	// Metadata information from cluster created resources.
	Metadata             *SGClusterSpecMetadata             `json:"metadata,omitempty"`
	NonProductionOptions *SGClusterSpecNonProductionOptions `json:"nonProductionOptions,omitempty"`

	// Cluster pod's configuration.
	Pods SGClusterSpecPods `json:"pods"`

	// This section allows to configure Postgres features
	Postgres SGClusterSpecPostgres `json:"postgres"`

	// Kubernetes [services](https://kubernetes.io/docs/concepts/services-networking/service/) created or managed by StackGres.
	PostgresServices *SGClusterSpecPostgresServices `json:"postgresServices,omitempty"`

	// If enabled, a ServiceMonitor is created for each Prometheus instance found in order to collect metrics.
	PrometheusAutobind *bool `json:"prometheusAutobind,omitempty"`

	// Make the cluster a read-only standby replica allowing to replicate from another PostgreSQL instance and acting as a rely.
	//
	// Changing this section is allowed to fix issues or to change the replication source.
	//
	// Removing this section convert the cluster in a normal cluster where the standby leader is converted into the a primary instance.
	ReplicateFrom *SGClusterSpecReplicateFrom `json:"replicateFrom,omitempty"`

	// This section allows to configure Postgres replication mode and HA roles groups.
	//
	// The main replication group is implicit and contains the total number of instances less the sum of all
	//  instances in other replication groups.
	//
	// The total number of instances is always specified by `.spec.instances`.
	Replication *SGClusterSpecReplication `json:"replication,omitempty"`

	// Name of the [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-resource-profiles/). A SGInstanceProfile defines CPU and memory limits. Must exist before creating a cluster. When no profile is set, a default (currently: 1 core, 2 GiB RAM) one is used.
	SgInstanceProfile *string `json:"sgInstanceProfile,omitempty"`

	// The list of Postgres extensions to install. This section is filled by the operator.
	ToInstallPostgresExtensions *[]SGClusterSpecToInstallPostgresExtensionsItem `json:"toInstallPostgresExtensions,omitempty"`
}

// SGClusterSpecConfigurations defines model for SGClusterSpecConfigurations.
type SGClusterSpecConfigurations struct {
	// **Deprecated**: use instead .spec.configurations.backups[].path
	//
	// The path were the backup is stored. If not set this field is filled up by the operator.
	//
	// When provided will indicate were the backups and WAL files will be stored.
	BackupPath *string `json:"backupPath,omitempty"`

	// List of backups configurations for this SGCluster
	Backups *[]SGClusterSpecConfigurationsBackupsItem `json:"backups"`

	// **Deprecated**: use instead .spec.configurations.backups with sgObjectStorage.
	//
	// Name of the [SGBackupConfig](https://stackgres.io/doc/latest/reference/crd/sgbackupconfig) to use for the cluster. It defines the backups policy, storage and retention, among others, applied to the cluster. When not set, backup configuration will not be used.
	SgBackupConfig *string `json:"sgBackupConfig,omitempty"`

	// Name of the [SGPoolingConfig](https://stackgres.io/doc/latest/reference/crd/sgpoolconfig) used for this cluster. Each pod contains a sidecar with a connection pooler (currently: [PgBouncer](https://www.pgbouncer.org/)). The connection pooler is implemented as a sidecar.
	//
	// If not set, a default configuration will be used. Disabling connection pooling altogether is possible if the disableConnectionPooling property of the pods object is set to true.
	SgPoolingConfig *string `json:"sgPoolingConfig,omitempty"`

	// Name of the [SGPostgresConfig](https://stackgres.io/doc/latest/reference/crd/sgpgconfig) used for the cluster. It must exist. When not set, a default Postgres config, for the major version selected, is used.
	SgPostgresConfig *string `json:"sgPostgresConfig,omitempty"`
}

// SGClusterSpecConfigurationsBackupsItem defines model for SGClusterSpecConfigurationsBackupsItem.
type SGClusterSpecConfigurationsBackupsItem struct {
	// Specifies the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method is `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but it compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and compression ratio, being about 3 times better than LZ4.
	Compression *string `json:"compression,omitempty"`

	// Continuous Archiving backups are composed of periodic *base backups* and all the WAL segments produced in between those base backups. This parameter specifies at what time and with what frequency to start performing a new base backup.
	//
	// Use cron syntax (`m h dom mon dow`) for this parameter, i.e., 5 values separated by spaces:
	// *  `m`: minute, 0 to 59.
	// *  `h`: hour, 0 to 23.
	// *  `dom`: day of month, 1 to 31 (recommended not to set it higher than 28).
	// *  `mon`: month, 1 to 12.
	// *  `dow`: day of week, 0 to 7 (0 and 7 both represent Sunday).
	//
	// Also ranges of values (`start-end`), the symbol `*` (meaning `first-last`) or even `*/N`, where `N` is a number, meaning ""every `N`, may be used. All times are UTC. It is recommended to avoid 00:00 as base backup time, to avoid overlapping with any other external operations happening at this time.
	//
	// If not set, full backups are performed each day at 05:00 UTC.
	CronSchedule *string `json:"cronSchedule,omitempty"`

	// The path were the backup is stored. If not set this field is filled up by the operator.
	//
	// When provided will indicate were the backups and WAL files will be stored.
	Path *string `json:"path,omitempty"`

	// Configuration that affects the backup network and disk usage performance.
	Performance *SGClusterSpecConfigurationsBackupsItemPerformance `json:"performance,omitempty"`

	// When an automatic retention policy is defined to delete old base backups, this parameter specifies the number of base backups to keep, in a sliding window.
	//
	// Consequently, the time range covered by backups is `periodicity*retention`, where `periodicity` is the separation between backups as specified by the `cronSchedule` property.
	//
	// Default is 5.
	Retention *int `json:"retention,omitempty"`

	// Name of the [SGObjectStorage](https://stackgres.io/doc/latest/reference/crd/sgobjectstorage) to use for the cluster. It defines the location in which the the backups will be stored.
	SgObjectStorage string `json:"sgObjectStorage"`
}

// SGClusterSpecConfigurationsBackupsItemPerformance defines model for SGClusterSpecConfigurationsBackupsItemPerformance.
type SGClusterSpecConfigurationsBackupsItemPerformance struct {
	// Backup storage may use several concurrent streams to read the data. This parameter configures the number of parallel streams to use. By default, it's set to the minimum between the number of file to read and 10.
	DownloadConcurrency *int `json:"downloadConcurrency,omitempty"`

	// Maximum disk read I/O when performing a backup. In bytes (per second).
	MaxDiskBandwidth *int `json:"maxDiskBandwidth,omitempty"`

	// Maximum storage upload bandwidth used when storing a backup. In bytes (per second).
	MaxNetworkBandwidth *int `json:"maxNetworkBandwidth,omitempty"`

	// Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use. By default, it's set to 16.
	UploadConcurrency *int `json:"uploadConcurrency,omitempty"`

	// Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use to reading from disk. By default, it's set to 1.
	UploadDiskConcurrency *int `json:"uploadDiskConcurrency,omitempty"`
}

// SGClusterSpecDistributedLogs defines model for SGClusterSpecDistributedLogs.
type SGClusterSpecDistributedLogs struct {
	// Define a retention window with the syntax `<integer> (minutes|hours|days|months)` in which log entries are kept.
	//  Log entries will be removed when they get older more than the double of the specified retention window.
	//
	// When this field is changed the retention will be applied only to log entries that are newer than the end of
	//  the retention window previously specified. If no retention window was previously specified it is considered
	//  to be of 7 days. This means that if previous retention window is of `7 days` new retention configuration will
	//  apply after UTC timestamp calculated with: `SELECT date_trunc('days', now() at time zone 'UTC') - INTERVAL '7 days'`.
	Retention *string `json:"retention,omitempty"`

	// Name of the [SGDistributedLogs](https://stackgres.io/doc/latest/04-postgres-cluster-management/06-distributed-logs/) to use for this cluster. It must exist.
	SgDistributedLogs *string `json:"sgDistributedLogs,omitempty"`
}

// SGClusterSpecInitialData defines model for SGClusterSpecInitialData.
type SGClusterSpecInitialData struct {
	Restore *SGClusterSpecInitialDataRestore `json:"restore,omitempty"`

	// **Deprecated** use instead .spec.managedSql with SGScript.
	//
	// A list of SQL scripts executed in sequence, exactly once, when the database is bootstrap and/or after restore is completed.
	Scripts *[]SGClusterSpecInitialDataScriptsItem `json:"scripts,omitempty"`
}

// SGClusterSpecInitialDataRestore defines model for SGClusterSpecInitialDataRestore.
type SGClusterSpecInitialDataRestore struct {
	// The backup fetch process may fetch several streams in parallel. Parallel fetching is enabled when set to a value larger than one.
	//
	// If not specified it will be interpreted as latest.
	DownloadDiskConcurrency *int `json:"downloadDiskConcurrency,omitempty"`

	// From which backup to restore and how the process is configured
	FromBackup *SGClusterSpecInitialDataRestoreFromBackup `json:"fromBackup,omitempty"`
}

// SGClusterSpecInitialDataRestoreFromBackup defines model for SGClusterSpecInitialDataRestoreFromBackup.
type SGClusterSpecInitialDataRestoreFromBackup struct {
	// When set to the name of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. The selected backup must be in the same namespace.
	Name *string `json:"name,omitempty"`

	// It is possible to restore the database to its state at any time since your backup was taken using Point-in-Time Recovery (PITR) as long as another backup newer than the PITR requested restoration date does not exists.
	//
	// Point In Time Recovery (PITR). PITR allow to restore the database state to an arbitrary point of time in the past, as long as you specify a backup older than the PITR requested restoration date and does not exists a backup newer than the same restoration date.
	//
	// See also: https://www.postgresql.org/docs/current/continuous-archiving.html
	PointInTimeRecovery *SGClusterSpecInitialDataRestoreFromBackupPointInTimeRecovery `json:"pointInTimeRecovery,omitempty"`

	// Specify the [recovery_target](https://postgresqlco.nf/doc/en/param/recovery_target/) that specifies that recovery should end as soon as a consistent
	//  state is reached, i.e., as early as possible. When restoring from an online backup, this means the point where taking the backup ended.
	//
	// Technically, this is a string parameter, but 'immediate' is currently the only allowed value.
	Target *string `json:"target,omitempty"`

	// Specify the [recovery_target_timeline](https://postgresqlco.nf/doc/en/param/recovery_target_timeline/) to recover into a particular timeline.
	//  The default is to recover along the same timeline that was current when the base backup was taken. Setting this to latest recovers to the latest
	//  timeline found in the archive, which is useful in a standby server. Other than that you only need to set this parameter in complex re-recovery
	//  situations, where you need to return to a state that itself was reached after a point-in-time recovery.
	TargetTimeline *string `json:"targetTimeline,omitempty"`

	// When set to the UID of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. This field is deprecated.
	Uid *string `json:"uid,omitempty"`
}

// SGClusterSpecInitialDataRestoreFromBackupPointInTimeRecovery defines model for SGClusterSpecInitialDataRestoreFromBackupPointInTimeRecovery.
type SGClusterSpecInitialDataRestoreFromBackupPointInTimeRecovery struct {
	// An ISO 8601 date, that holds UTC date indicating at which point-in-time the database have to be restored.
	RestoreToTimestamp *string `json:"restoreToTimestamp,omitempty"`
}

// SGClusterSpecInitialDataScriptsItem defines model for SGClusterSpecInitialDataScriptsItem.
type SGClusterSpecInitialDataScriptsItem struct {
	// Database where the script is executed. Defaults to the `postgres` database, if not specified.
	Database *string `json:"database,omitempty"`

	// Name of the script. Must be unique across this SGCluster.
	Name *string `json:"name,omitempty"`

	// Raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.
	Script *string `json:"script,omitempty"`

	// Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.
	//
	// Fields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.
	ScriptFrom *SGClusterSpecInitialDataScriptsItemScriptFrom `json:"scriptFrom,omitempty"`
}

// SGClusterSpecInitialDataScriptsItemScriptFrom defines model for SGClusterSpecInitialDataScriptsItemScriptFrom.
type SGClusterSpecInitialDataScriptsItemScriptFrom struct {
	// A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.
	ConfigMapKeyRef *SGClusterSpecInitialDataScriptsItemScriptFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.
	SecretKeyRef *SGClusterSpecInitialDataScriptsItemScriptFromSecretKeyRef `json:"secretKeyRef,omitempty"`
}

// SGClusterSpecInitialDataScriptsItemScriptFromConfigMapKeyRef defines model for SGClusterSpecInitialDataScriptsItemScriptFromConfigMapKeyRef.
type SGClusterSpecInitialDataScriptsItemScriptFromConfigMapKeyRef struct {
	// The key name within the ConfigMap that contains the SQL script to execute.
	Key *string `json:"key,omitempty"`

	// The name of the ConfigMap that contains the SQL script to execute.
	Name *string `json:"name,omitempty"`
}

// SGClusterSpecInitialDataScriptsItemScriptFromSecretKeyRef defines model for SGClusterSpecInitialDataScriptsItemScriptFromSecretKeyRef.
type SGClusterSpecInitialDataScriptsItemScriptFromSecretKeyRef struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key *string `json:"key,omitempty"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `json:"name,omitempty"`
}

// SGClusterSpecManagedSql defines model for SGClusterSpecManagedSql.
type SGClusterSpecManagedSql struct {
	// If true, when any entry of any `SGScript` fail will not prevent subsequent `SGScript` from being executed. By default is `false`.
	ContinueOnSGScriptError *bool `json:"continueOnSGScriptError,omitempty"`

	// A list of script references that will be executed in sequence.
	Scripts *[]SGClusterSpecManagedSqlScriptsItem `json:"scripts,omitempty"`
}

// SGClusterSpecManagedSqlScriptsItem defines model for SGClusterSpecManagedSqlScriptsItem.
type SGClusterSpecManagedSqlScriptsItem struct {
	// The id is immutable and must be unique across all the `SGScript` entries. It is replaced by the operator and is used to identify the `SGScript` entry.
	Id *int `json:"id,omitempty"`

	// A reference to an `SGScript`
	SgScript *string `json:"sgScript,omitempty"`
}

// SGClusterSpecMetadata defines model for SGClusterSpecMetadata.
type SGClusterSpecMetadata struct {
	// Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to resources created and managed by StackGres.
	Annotations *SGClusterSpecMetadataAnnotations `json:"annotations,omitempty"`

	// Custom Kubernetes [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) to be passed to resources created and managed by StackGres.
	Labels *SGClusterSpecMetadataLabels `json:"labels,omitempty"`
}

// SGClusterSpecMetadataAnnotations defines model for SGClusterSpecMetadataAnnotations.
type SGClusterSpecMetadataAnnotations struct {
	// Annotations to attach to any resource created or managed by StackGres.
	AllResources map[string]string `json:"allResources,omitempty"`

	// Annotations to attach to pods created or managed by StackGres.
	ClusterPods map[string]string `json:"clusterPods,omitempty"`

	// Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-primary` service.
	PrimaryService map[string]string `json:"primaryService,omitempty"`

	// Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-replicas` service.
	ReplicasService map[string]string `json:"replicasService,omitempty"`

	// Annotations to attach to all services created or managed by StackGres.
	Services map[string]string `json:"services,omitempty"`
}

// SGClusterSpecMetadataLabels defines model for SGClusterSpecMetadataLabels.
type SGClusterSpecMetadataLabels struct {
	// Labels to attach to pods created or managed by StackGres.
	ClusterPods map[string]string `json:"clusterPods,omitempty"`
}

// SGClusterSpecNonProductionOptions defines model for SGClusterSpecNonProductionOptions.
type SGClusterSpecNonProductionOptions struct {
	// It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.
	//
	// The same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres pod on a given Kubernetes node. Set this property to true to allow more than one StackGres pod per node.
	DisableClusterPodAntiAffinity *bool `json:"disableClusterPodAntiAffinity,omitempty"`

	// It is a best practice, on containerized environments, when running production workloads, to enforce container's resources requirements.
	//
	// By default, StackGres will configure resource requirements for all the containers. Set this property to true to prevent StackGres from setting container's resources requirements (except for patroni container, see `disablePatroniResourceRequirements`).
	DisableClusterResourceRequirements *bool `json:"disableClusterResourceRequirements,omitempty"`

	// It is a best practice, on containerized environments, when running production workloads, to enforce container's resources requirements.
	//
	// The same best practice applies to databases on containers. By default, StackGres will configure resource requirements for patroni container. Set this property to true to prevent StackGres from setting patroni container's resources requirement.
	DisablePatroniResourceRequirements *bool `json:"disablePatroniResourceRequirements,omitempty"`

	// On containerized environments, when running production workloads, enforcing container's cpu requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
	//  the workload with less cpu than it requires. It also allow to set [static CPU management policy](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) that allows to guarantee a pod the usage exclusive CPUs on the node.
	//
	// By default, StackGres will configure cpu requirements to have the same limit and request for all the containers. Set this property to true to prevent StackGres from setting container's cpu requirements request equals to the limit (except for patroni container, see `enablePatroniCpuRequests`)
	//  when `.spec.requests.containers.<container name>.cpu` `.spec.requests.initContainers.<container name>.cpu` is configured in the referenced `SGInstanceProfile`.
	EnableSetClusterCpuRequests *bool `json:"enableSetClusterCpuRequests,omitempty"`

	// On containerized environments, when running production workloads, enforcing container's memory requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
	//  the workload with less memory than it requires.
	//
	// By default, StackGres will configure memory requirements to have the same limit and request for all the containers. Set this property to true to prevent StackGres from setting container's memory requirements request equals to the limit (except for patroni container, see `enablePatroniCpuRequests`)
	//  when `.spec.requests.containers.<container name>.memory` `.spec.requests.initContainers.<container name>.memory` is configured in the referenced `SGInstanceProfile`.
	EnableSetClusterMemoryRequests *bool `json:"enableSetClusterMemoryRequests,omitempty"`

	// On containerized environments, when running production workloads, enforcing container's cpu requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
	//  the workload with less cpu than it requires. It also allow to set [static CPU management policy](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) that allows to guarantee a pod the usage exclusive CPUs on the node.
	//
	// By default, StackGres will configure cpu requirements to have the same limit and request for the patroni container. Set this property to true to prevent StackGres from setting patroni container's cpu requirements request equals to the limit
	//  when `.spec.requests.cpu` is configured in the referenced `SGInstanceProfile`.
	EnableSetPatroniCpuRequests *bool `json:"enableSetPatroniCpuRequests,omitempty"`

	// On containerized environments, when running production workloads, enforcing container's memory requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
	//  the workload with less memory than it requires.
	//
	// By default, StackGres will configure memory requirements to have the same limit and request for the patroni container. Set this property to true to prevent StackGres from setting patroni container's memory requirements request equals to the limit
	//  when `.spec.requests.memory` is configured in the referenced `SGInstanceProfile`.
	EnableSetPatroniMemoryRequests *bool `json:"enableSetPatroniMemoryRequests,omitempty"`

	// A list of StackGres feature gates to enable (not suitable for a production environment).
	//
	// Available feature gates are:
	// * `babelfish-flavor`: Allow to use `babelfish` flavor.
	EnabledFeatureGates *[]string `json:"enabledFeatureGates,omitempty"`
}

// SGClusterSpecPods defines model for SGClusterSpecPods.
type SGClusterSpecPods struct {
	// A list of custom application containers that run within the cluster's Pods.
	//
	// The name used in this section will be prefixed with the string `custom-` so that when
	//  referencing them in the .spec.containers section of SGInstanceProfile the name used
	//  have to be prepended with the same prefix.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#container-v1-core
	CustomContainers *[]SGClusterSpecPodsCustomContainersItem `json:"customContainers,omitempty"`

	// A list of custom application init containers that run within the cluster's Pods. The
	//  custom init containers will run following the defined sequence as the end of
	//  cluster's Pods init containers.
	//
	// The name used in this section will be prefixed with the string `custom-` so that when
	//  referencing them in the .spec.containers section of SGInstanceProfile the name used
	//  have to be prepended with the same prefix.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#container-v1-core
	CustomInitContainers *[]SGClusterSpecPodsCustomInitContainersItem `json:"customInitContainers,omitempty"`

	// A list of custom volumes that may be used along with any container defined in
	//  customInitContainers or customContainers sections.
	//
	// The name used in this section will be prefixed with the string `custom-` so that when
	//  referencing them in the customInitContainers or customContainers sections the name used
	//  have to be prepended with the same prefix.
	//
	// Only the following volume types are allowed: configMap, downwardAPI, emptyDir,
	//  gitRepo, glusterfs, hostPath, nfs, projected and secret
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#volume-v1-core
	CustomVolumes *[]SGClusterSpecPodsCustomVolumesItem `json:"customVolumes,omitempty"`

	// If set to `true`, avoids creating a connection pooling (using [PgBouncer](https://www.pgbouncer.org/)) sidecar.
	DisableConnectionPooling *bool `json:"disableConnectionPooling,omitempty"`

	// If set to `true`, avoids creating the Prometheus exporter sidecar. Recommended when there's no intention to use Prometheus for monitoring.
	DisableMetricsExporter *bool `json:"disableMetricsExporter,omitempty"`

	// If set to `true`, avoids creating the envoy sidecar. This sidecar is used as the endge proxy for the cluster’s Pods providing extra metrics to the monitoring layer.
	DisableEnvoy *bool `json:"disableEnvoy,omitempty"`

	// If set to `true`, avoids creating the `postgres-util` sidecar. This sidecar contains usual Postgres administration utilities *that are not present in the main (`patroni`) container*, like `psql`. Only disable if you know what you are doing.
	DisablePostgresUtil *bool `json:"disablePostgresUtil,omitempty"`

	// managementPolicy controls how pods are created during initial scale up, when replacing pods
	//  on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created
	//  in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is
	//  ready before continuing. When scaling down, the pods are removed in the opposite order.
	//  The alternative policy is `Parallel` which will create pods in parallel to match the desired
	//  scale without waiting, and on scale down will delete all pods at once.
	ManagementPolicy *string `json:"managementPolicy,omitempty"`

	// Pod's persistent volume configuration.
	PersistentVolume SGClusterSpecPodsPersistentVolume `json:"persistentVolume"`

	// Pod custom resources configuration.
	Resources *SGClusterSpecPodsResources `json:"resources,omitempty"`

	// Pod custom scheduling, affinity and topology spread constratins configuration.
	Scheduling *SGClusterSpecPodsScheduling `json:"scheduling,omitempty"`
}

// SGClusterSpecPodsCustomContainersItem defines model for SGClusterSpecPodsCustomContainersItem.
type SGClusterSpecPodsCustomContainersItem struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args *[]string `json:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command *[]string `json:"command,omitempty"`

	// List of environment variables to set in the container. Cannot be updated.
	Env *[]SGClusterSpecPodsCustomContainersItemEnvItem `json:"env,omitempty"`

	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom *[]SGClusterSpecPodsCustomContainersItemEnvFromItem `json:"envFrom,omitempty"`

	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `json:"image,omitempty"`

	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`

	// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	Lifecycle *SGClusterSpecPodsCustomContainersItemLifecycle `json:"lifecycle,omitempty"`

	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	LivenessProbe *SGClusterSpecPodsCustomContainersItemLivenessProbe `json:"livenessProbe,omitempty"`

	// Name of the container specified as a DNS_LABEL. Each
	//  container in a pod must have a unique name (DNS_LABEL). Cannot
	//  be updated.
	//
	// The name will be prefixed with the string `custom-` so that when referencing it
	//  in the .spec.containers section of SGInstanceProfile the name used have to be
	//  prepended with the same prefix.
	Name string `json:"name"`

	// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
	Ports *[]SGClusterSpecPodsCustomContainersItemPortsItem `json:"ports,omitempty"`

	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	ReadinessProbe *SGClusterSpecPodsCustomContainersItemReadinessProbe `json:"readinessProbe,omitempty"`

	// ResourceRequirements describes the compute resource requirements.
	Resources *SGClusterSpecPodsCustomContainersItemResources `json:"resources,omitempty"`

	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext *SGClusterSpecPodsCustomContainersItemSecurityContext `json:"securityContext,omitempty"`

	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	StartupProbe *SGClusterSpecPodsCustomContainersItemStartupProbe `json:"startupProbe,omitempty"`

	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `json:"stdin,omitempty"`

	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `json:"stdinOnce,omitempty"`

	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `json:"terminationMessagePath,omitempty"`

	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `json:"terminationMessagePolicy,omitempty"`

	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `json:"tty,omitempty"`

	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices *[]SGClusterSpecPodsCustomContainersItemVolumeDevicesItem `json:"volumeDevices,omitempty"`

	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts *[]SGClusterSpecPodsCustomContainersItemVolumeMountsItem `json:"volumeMounts,omitempty"`

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `json:"workingDir,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvItem defines model for SGClusterSpecPodsCustomContainersItemEnvItem.
type SGClusterSpecPodsCustomContainersItemEnvItem struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:"name"`

	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `json:"value,omitempty"`

	// EnvVarSource represents a source for the value of an EnvVar.
	ValueFrom *SGClusterSpecPodsCustomContainersItemEnvItemValueFrom `json:"valueFrom,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvItemValueFrom defines model for SGClusterSpecPodsCustomContainersItemEnvItemValueFrom.
type SGClusterSpecPodsCustomContainersItemEnvItemValueFrom struct {
	// Selects a key from a ConfigMap.
	ConfigMapKeyRef *SGClusterSpecPodsCustomContainersItemEnvItemValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`

	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *SGClusterSpecPodsCustomContainersItemEnvItemValueFromFieldRef `json:"fieldRef,omitempty"`

	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *SGClusterSpecPodsCustomContainersItemEnvItemValueFromResourceFieldRef `json:"resourceFieldRef,omitempty"`

	// SecretKeySelector selects a key of a Secret.
	SecretKeyRef *SGClusterSpecPodsCustomContainersItemEnvItemValueFromSecretKeyRef `json:"secretKeyRef,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvItemValueFromConfigMapKeyRef defines model for SGClusterSpecPodsCustomContainersItemEnvItemValueFromConfigMapKeyRef.
type SGClusterSpecPodsCustomContainersItemEnvItemValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `json:"key"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvItemValueFromFieldRef defines model for SGClusterSpecPodsCustomContainersItemEnvItemValueFromFieldRef.
type SGClusterSpecPodsCustomContainersItemEnvItemValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// SGClusterSpecPodsCustomContainersItemEnvItemValueFromResourceFieldRef defines model for SGClusterSpecPodsCustomContainersItemEnvItemValueFromResourceFieldRef.
type SGClusterSpecPodsCustomContainersItemEnvItemValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`

	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// <quantity>        ::= <signedNumber><suffix>
	//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//   a. No precision is lost
	//   b. No fractional digits will be emitted
	//   c. The exponent (or suffix) is as large as possible.
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//   1.5 will be serialized as "1500m"
	//   1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`

	// Required: resource to select
	Resource string `json:"resource"`
}

// SGClusterSpecPodsCustomContainersItemEnvItemValueFromSecretKeyRef defines model for SGClusterSpecPodsCustomContainersItemEnvItemValueFromSecretKeyRef.
type SGClusterSpecPodsCustomContainersItemEnvItemValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvFromItem defines model for SGClusterSpecPodsCustomContainersItemEnvFromItem.
type SGClusterSpecPodsCustomContainersItemEnvFromItem struct {
	// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
	//
	// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
	ConfigMapRef *SGClusterSpecPodsCustomContainersItemEnvFromItemConfigMapRef `json:"configMapRef,omitempty"`

	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `json:"prefix,omitempty"`

	// SecretEnvSource selects a Secret to populate the environment variables with.
	//
	// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
	SecretRef *SGClusterSpecPodsCustomContainersItemEnvFromItemSecretRef `json:"secretRef,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvFromItemConfigMapRef defines model for SGClusterSpecPodsCustomContainersItemEnvFromItemConfigMapRef.
type SGClusterSpecPodsCustomContainersItemEnvFromItemConfigMapRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the ConfigMap must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemEnvFromItemSecretRef defines model for SGClusterSpecPodsCustomContainersItemEnvFromItemSecretRef.
type SGClusterSpecPodsCustomContainersItemEnvFromItemSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the Secret must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecycle defines model for SGClusterSpecPodsCustomContainersItemLifecycle.
type SGClusterSpecPodsCustomContainersItemLifecycle struct {
	// Handler defines a specific action that should be taken
	PostStart *SGClusterSpecPodsCustomContainersItemLifecyclePostStart `json:"postStart,omitempty"`

	// Handler defines a specific action that should be taken
	PreStop *SGClusterSpecPodsCustomContainersItemLifecyclePreStop `json:"preStop,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePostStart defines model for SGClusterSpecPodsCustomContainersItemLifecyclePostStart.
type SGClusterSpecPodsCustomContainersItemLifecyclePostStart struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomContainersItemLifecyclePostStartExec `json:"exec,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGet `json:"httpGet,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomContainersItemLifecyclePostStartTcpSocket `json:"tcpSocket,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePostStartExec defines model for SGClusterSpecPodsCustomContainersItemLifecyclePostStartExec.
type SGClusterSpecPodsCustomContainersItemLifecyclePostStartExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGet defines model for SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGet.
type SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomContainersItemLifecyclePostStartHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePostStartTcpSocket defines model for SGClusterSpecPodsCustomContainersItemLifecyclePostStartTcpSocket.
type SGClusterSpecPodsCustomContainersItemLifecyclePostStartTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePreStop defines model for SGClusterSpecPodsCustomContainersItemLifecyclePreStop.
type SGClusterSpecPodsCustomContainersItemLifecyclePreStop struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomContainersItemLifecyclePreStopExec `json:"exec,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGet `json:"httpGet,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomContainersItemLifecyclePreStopTcpSocket `json:"tcpSocket,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePreStopExec defines model for SGClusterSpecPodsCustomContainersItemLifecyclePreStopExec.
type SGClusterSpecPodsCustomContainersItemLifecyclePreStopExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGet defines model for SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGet.
type SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomContainersItemLifecyclePreStopHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomContainersItemLifecyclePreStopTcpSocket defines model for SGClusterSpecPodsCustomContainersItemLifecyclePreStopTcpSocket.
type SGClusterSpecPodsCustomContainersItemLifecyclePreStopTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomContainersItemLivenessProbe defines model for SGClusterSpecPodsCustomContainersItemLivenessProbe.
type SGClusterSpecPodsCustomContainersItemLivenessProbe struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomContainersItemLivenessProbeExec `json:"exec,omitempty"`

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGet `json:"httpGet,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomContainersItemLivenessProbeTcpSocket `json:"tcpSocket,omitempty"`

	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLivenessProbeExec defines model for SGClusterSpecPodsCustomContainersItemLivenessProbeExec.
type SGClusterSpecPodsCustomContainersItemLivenessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGet defines model for SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGet.
type SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomContainersItemLivenessProbeHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomContainersItemLivenessProbeTcpSocket defines model for SGClusterSpecPodsCustomContainersItemLivenessProbeTcpSocket.
type SGClusterSpecPodsCustomContainersItemLivenessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomContainersItemPortsItem defines model for SGClusterSpecPodsCustomContainersItemPortsItem.
type SGClusterSpecPodsCustomContainersItemPortsItem struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int32 `json:"containerPort"`

	// What host IP to bind the external port to.
	HostIP *string `json:"hostIP,omitempty"`

	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int32 `json:"hostPort,omitempty"`

	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `json:"name,omitempty"`

	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `json:"protocol,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemReadinessProbe defines model for SGClusterSpecPodsCustomContainersItemReadinessProbe.
type SGClusterSpecPodsCustomContainersItemReadinessProbe struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomContainersItemReadinessProbeExec `json:"exec,omitempty"`

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGet `json:"httpGet,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomContainersItemReadinessProbeTcpSocket `json:"tcpSocket,omitempty"`

	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemReadinessProbeExec defines model for SGClusterSpecPodsCustomContainersItemReadinessProbeExec.
type SGClusterSpecPodsCustomContainersItemReadinessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGet defines model for SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGet.
type SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomContainersItemReadinessProbeHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomContainersItemReadinessProbeTcpSocket defines model for SGClusterSpecPodsCustomContainersItemReadinessProbeTcpSocket.
type SGClusterSpecPodsCustomContainersItemReadinessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomContainersItemResources defines model for SGClusterSpecPodsCustomContainersItemResources.
type SGClusterSpecPodsCustomContainersItemResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]string `json:"limits,omitempty"`

	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]string `json:"requests,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemSecurityContext defines model for SGClusterSpecPodsCustomContainersItemSecurityContext.
type SGClusterSpecPodsCustomContainersItemSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Adds and removes POSIX capabilities from running containers.
	Capabilities *SGClusterSpecPodsCustomContainersItemSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged *bool `json:"privileged,omitempty"`

	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount *string `json:"procMount,omitempty"`

	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup *int64 `json:"runAsGroup,omitempty"`

	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int64 `json:"runAsUser,omitempty"`

	// SELinuxOptions are the labels to be applied to the container
	SeLinuxOptions *SGClusterSpecPodsCustomContainersItemSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
	SeccompProfile *SGClusterSpecPodsCustomContainersItemSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsSecurityContextOptions contain Windows-specific options and credentials.
	WindowsOptions *SGClusterSpecPodsCustomContainersItemSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemSecurityContextCapabilities defines model for SGClusterSpecPodsCustomContainersItemSecurityContextCapabilities.
type SGClusterSpecPodsCustomContainersItemSecurityContextCapabilities struct {
	// Added capabilities
	Add *[]string `json:"add,omitempty"`

	// Removed capabilities
	Drop *[]string `json:"drop,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemSecurityContextSeLinuxOptions defines model for SGClusterSpecPodsCustomContainersItemSecurityContextSeLinuxOptions.
type SGClusterSpecPodsCustomContainersItemSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `json:"level,omitempty"`

	// Role is a SELinux role label that applies to the container.
	Role *string `json:"role,omitempty"`

	// Type is a SELinux type label that applies to the container.
	Type *string `json:"type,omitempty"`

	// User is a SELinux user label that applies to the container.
	User *string `json:"user,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemSecurityContextSeccompProfile defines model for SGClusterSpecPodsCustomContainersItemSecurityContextSeccompProfile.
type SGClusterSpecPodsCustomContainersItemSecurityContextSeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// SGClusterSpecPodsCustomContainersItemSecurityContextWindowsOptions defines model for SGClusterSpecPodsCustomContainersItemSecurityContextWindowsOptions.
type SGClusterSpecPodsCustomContainersItemSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `json:"hostProcess,omitempty"`

	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemStartupProbe defines model for SGClusterSpecPodsCustomContainersItemStartupProbe.
type SGClusterSpecPodsCustomContainersItemStartupProbe struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomContainersItemStartupProbeExec `json:"exec,omitempty"`

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomContainersItemStartupProbeHttpGet `json:"httpGet,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomContainersItemStartupProbeTcpSocket `json:"tcpSocket,omitempty"`

	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemStartupProbeExec defines model for SGClusterSpecPodsCustomContainersItemStartupProbeExec.
type SGClusterSpecPodsCustomContainersItemStartupProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemStartupProbeHttpGet defines model for SGClusterSpecPodsCustomContainersItemStartupProbeHttpGet.
type SGClusterSpecPodsCustomContainersItemStartupProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomContainersItemStartupProbeHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomContainersItemStartupProbeHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomContainersItemStartupProbeHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomContainersItemStartupProbeHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomContainersItemStartupProbeTcpSocket defines model for SGClusterSpecPodsCustomContainersItemStartupProbeTcpSocket.
type SGClusterSpecPodsCustomContainersItemStartupProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomContainersItemVolumeDevicesItem defines model for SGClusterSpecPodsCustomContainersItemVolumeDevicesItem.
type SGClusterSpecPodsCustomContainersItemVolumeDevicesItem struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `json:"devicePath"`

	// name must match the name of a persistentVolumeClaim in the pod
	Name string `json:"name"`
}

// SGClusterSpecPodsCustomContainersItemVolumeMountsItem defines model for SGClusterSpecPodsCustomContainersItemVolumeMountsItem.
type SGClusterSpecPodsCustomContainersItemVolumeMountsItem struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `json:"mountPath"`

	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `json:"mountPropagation,omitempty"`

	// This must match the Name of a Volume.
	Name string `json:"name"`

	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`

	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `json:"subPath,omitempty"`

	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `json:"subPathExpr,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItem defines model for SGClusterSpecPodsCustomInitContainersItem.
type SGClusterSpecPodsCustomInitContainersItem struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args *[]string `json:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command *[]string `json:"command,omitempty"`

	// List of environment variables to set in the container. Cannot be updated.
	Env *[]SGClusterSpecPodsCustomInitContainersItemEnvItem `json:"env,omitempty"`

	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom *[]SGClusterSpecPodsCustomInitContainersItemEnvFromItem `json:"envFrom,omitempty"`

	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `json:"image,omitempty"`

	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`

	// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	Lifecycle *SGClusterSpecPodsCustomInitContainersItemLifecycle `json:"lifecycle,omitempty"`

	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	LivenessProbe *SGClusterSpecPodsCustomInitContainersItemLivenessProbe `json:"livenessProbe,omitempty"`

	// Name of the container specified as a DNS_LABEL. Each
	//  container in a pod must have a unique name (DNS_LABEL). Cannot
	//  be updated.
	//
	// The name will be prefixed with the string `custom-` so that when referencing it
	//  in the .spec.containers section of SGInstanceProfile the name used have to be
	//  prepended with the same prefix.
	Name string `json:"name"`

	// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
	Ports *[]SGClusterSpecPodsCustomInitContainersItemPortsItem `json:"ports,omitempty"`

	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	ReadinessProbe *SGClusterSpecPodsCustomInitContainersItemReadinessProbe `json:"readinessProbe,omitempty"`

	// ResourceRequirements describes the compute resource requirements.
	Resources *SGClusterSpecPodsCustomInitContainersItemResources `json:"resources,omitempty"`

	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext *SGClusterSpecPodsCustomInitContainersItemSecurityContext `json:"securityContext,omitempty"`

	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	StartupProbe *SGClusterSpecPodsCustomInitContainersItemStartupProbe `json:"startupProbe,omitempty"`

	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `json:"stdin,omitempty"`

	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `json:"stdinOnce,omitempty"`

	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `json:"terminationMessagePath,omitempty"`

	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `json:"terminationMessagePolicy,omitempty"`

	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `json:"tty,omitempty"`

	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices *[]SGClusterSpecPodsCustomInitContainersItemVolumeDevicesItem `json:"volumeDevices,omitempty"`

	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts *[]SGClusterSpecPodsCustomInitContainersItemVolumeMountsItem `json:"volumeMounts,omitempty"`

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `json:"workingDir,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvItem defines model for SGClusterSpecPodsCustomInitContainersItemEnvItem.
type SGClusterSpecPodsCustomInitContainersItemEnvItem struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:"name"`

	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `json:"value,omitempty"`

	// EnvVarSource represents a source for the value of an EnvVar.
	ValueFrom *SGClusterSpecPodsCustomInitContainersItemEnvItemValueFrom `json:"valueFrom,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvItemValueFrom defines model for SGClusterSpecPodsCustomInitContainersItemEnvItemValueFrom.
type SGClusterSpecPodsCustomInitContainersItemEnvItemValueFrom struct {
	// Selects a key from a ConfigMap.
	ConfigMapKeyRef *SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`

	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromFieldRef `json:"fieldRef,omitempty"`

	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromResourceFieldRef `json:"resourceFieldRef,omitempty"`

	// SecretKeySelector selects a key of a Secret.
	SecretKeyRef *SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromSecretKeyRef `json:"secretKeyRef,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromConfigMapKeyRef defines model for SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromConfigMapKeyRef.
type SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `json:"key"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromFieldRef defines model for SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromFieldRef.
type SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromResourceFieldRef defines model for SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromResourceFieldRef.
type SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`

	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// <quantity>        ::= <signedNumber><suffix>
	//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//   a. No precision is lost
	//   b. No fractional digits will be emitted
	//   c. The exponent (or suffix) is as large as possible.
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//   1.5 will be serialized as "1500m"
	//   1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`

	// Required: resource to select
	Resource string `json:"resource"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromSecretKeyRef defines model for SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromSecretKeyRef.
type SGClusterSpecPodsCustomInitContainersItemEnvItemValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvFromItem defines model for SGClusterSpecPodsCustomInitContainersItemEnvFromItem.
type SGClusterSpecPodsCustomInitContainersItemEnvFromItem struct {
	// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
	//
	// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
	ConfigMapRef *SGClusterSpecPodsCustomInitContainersItemEnvFromItemConfigMapRef `json:"configMapRef,omitempty"`

	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `json:"prefix,omitempty"`

	// SecretEnvSource selects a Secret to populate the environment variables with.
	//
	// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
	SecretRef *SGClusterSpecPodsCustomInitContainersItemEnvFromItemSecretRef `json:"secretRef,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvFromItemConfigMapRef defines model for SGClusterSpecPodsCustomInitContainersItemEnvFromItemConfigMapRef.
type SGClusterSpecPodsCustomInitContainersItemEnvFromItemConfigMapRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the ConfigMap must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemEnvFromItemSecretRef defines model for SGClusterSpecPodsCustomInitContainersItemEnvFromItemSecretRef.
type SGClusterSpecPodsCustomInitContainersItemEnvFromItemSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the Secret must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecycle defines model for SGClusterSpecPodsCustomInitContainersItemLifecycle.
type SGClusterSpecPodsCustomInitContainersItemLifecycle struct {
	// Handler defines a specific action that should be taken
	PostStart *SGClusterSpecPodsCustomInitContainersItemLifecyclePostStart `json:"postStart,omitempty"`

	// Handler defines a specific action that should be taken
	PreStop *SGClusterSpecPodsCustomInitContainersItemLifecyclePreStop `json:"preStop,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePostStart defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePostStart.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePostStart struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartExec `json:"exec,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGet `json:"httpGet,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartTcpSocket `json:"tcpSocket,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartExec defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartExec.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGet defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGet.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartTcpSocket defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartTcpSocket.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePostStartTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePreStop defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePreStop.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePreStop struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopExec `json:"exec,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGet `json:"httpGet,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopTcpSocket `json:"tcpSocket,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopExec defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopExec.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGet defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGet.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopTcpSocket defines model for SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopTcpSocket.
type SGClusterSpecPodsCustomInitContainersItemLifecyclePreStopTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomInitContainersItemLivenessProbe defines model for SGClusterSpecPodsCustomInitContainersItemLivenessProbe.
type SGClusterSpecPodsCustomInitContainersItemLivenessProbe struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomInitContainersItemLivenessProbeExec `json:"exec,omitempty"`

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGet `json:"httpGet,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomInitContainersItemLivenessProbeTcpSocket `json:"tcpSocket,omitempty"`

	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLivenessProbeExec defines model for SGClusterSpecPodsCustomInitContainersItemLivenessProbeExec.
type SGClusterSpecPodsCustomInitContainersItemLivenessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGet defines model for SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGet.
type SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomInitContainersItemLivenessProbeHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomInitContainersItemLivenessProbeTcpSocket defines model for SGClusterSpecPodsCustomInitContainersItemLivenessProbeTcpSocket.
type SGClusterSpecPodsCustomInitContainersItemLivenessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomInitContainersItemPortsItem defines model for SGClusterSpecPodsCustomInitContainersItemPortsItem.
type SGClusterSpecPodsCustomInitContainersItemPortsItem struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int32 `json:"containerPort"`

	// What host IP to bind the external port to.
	HostIP *string `json:"hostIP,omitempty"`

	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int32 `json:"hostPort,omitempty"`

	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `json:"name,omitempty"`

	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `json:"protocol,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemReadinessProbe defines model for SGClusterSpecPodsCustomInitContainersItemReadinessProbe.
type SGClusterSpecPodsCustomInitContainersItemReadinessProbe struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomInitContainersItemReadinessProbeExec `json:"exec,omitempty"`

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGet `json:"httpGet,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomInitContainersItemReadinessProbeTcpSocket `json:"tcpSocket,omitempty"`

	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemReadinessProbeExec defines model for SGClusterSpecPodsCustomInitContainersItemReadinessProbeExec.
type SGClusterSpecPodsCustomInitContainersItemReadinessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGet defines model for SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGet.
type SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomInitContainersItemReadinessProbeHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomInitContainersItemReadinessProbeTcpSocket defines model for SGClusterSpecPodsCustomInitContainersItemReadinessProbeTcpSocket.
type SGClusterSpecPodsCustomInitContainersItemReadinessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomInitContainersItemResources defines model for SGClusterSpecPodsCustomInitContainersItemResources.
type SGClusterSpecPodsCustomInitContainersItemResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]string `json:"limits,omitempty"`

	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]string `json:"requests,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemSecurityContext defines model for SGClusterSpecPodsCustomInitContainersItemSecurityContext.
type SGClusterSpecPodsCustomInitContainersItemSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Adds and removes POSIX capabilities from running containers.
	Capabilities *SGClusterSpecPodsCustomInitContainersItemSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged *bool `json:"privileged,omitempty"`

	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount *string `json:"procMount,omitempty"`

	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup *int64 `json:"runAsGroup,omitempty"`

	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int64 `json:"runAsUser,omitempty"`

	// SELinuxOptions are the labels to be applied to the container
	SeLinuxOptions *SGClusterSpecPodsCustomInitContainersItemSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
	SeccompProfile *SGClusterSpecPodsCustomInitContainersItemSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsSecurityContextOptions contain Windows-specific options and credentials.
	WindowsOptions *SGClusterSpecPodsCustomInitContainersItemSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemSecurityContextCapabilities defines model for SGClusterSpecPodsCustomInitContainersItemSecurityContextCapabilities.
type SGClusterSpecPodsCustomInitContainersItemSecurityContextCapabilities struct {
	// Added capabilities
	Add *[]string `json:"add,omitempty"`

	// Removed capabilities
	Drop *[]string `json:"drop,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemSecurityContextSeLinuxOptions defines model for SGClusterSpecPodsCustomInitContainersItemSecurityContextSeLinuxOptions.
type SGClusterSpecPodsCustomInitContainersItemSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `json:"level,omitempty"`

	// Role is a SELinux role label that applies to the container.
	Role *string `json:"role,omitempty"`

	// Type is a SELinux type label that applies to the container.
	Type *string `json:"type,omitempty"`

	// User is a SELinux user label that applies to the container.
	User *string `json:"user,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemSecurityContextSeccompProfile defines model for SGClusterSpecPodsCustomInitContainersItemSecurityContextSeccompProfile.
type SGClusterSpecPodsCustomInitContainersItemSecurityContextSeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// SGClusterSpecPodsCustomInitContainersItemSecurityContextWindowsOptions defines model for SGClusterSpecPodsCustomInitContainersItemSecurityContextWindowsOptions.
type SGClusterSpecPodsCustomInitContainersItemSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `json:"hostProcess,omitempty"`

	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemStartupProbe defines model for SGClusterSpecPodsCustomInitContainersItemStartupProbe.
type SGClusterSpecPodsCustomInitContainersItemStartupProbe struct {
	// ExecAction describes a "run in container" action.
	Exec *SGClusterSpecPodsCustomInitContainersItemStartupProbeExec `json:"exec,omitempty"`

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// HTTPGetAction describes an action based on HTTP Get requests.
	HttpGet *SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGet `json:"httpGet,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// TCPSocketAction describes an action based on opening a socket
	TcpSocket *SGClusterSpecPodsCustomInitContainersItemStartupProbeTcpSocket `json:"tcpSocket,omitempty"`

	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemStartupProbeExec defines model for SGClusterSpecPodsCustomInitContainersItemStartupProbeExec.
type SGClusterSpecPodsCustomInitContainersItemStartupProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command *[]string `json:"command,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGet defines model for SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGet.
type SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders *[]SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGetHttpHeadersItem `json:"httpHeaders,omitempty"`

	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGetHttpHeadersItem defines model for SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGetHttpHeadersItem.
type SGClusterSpecPodsCustomInitContainersItemStartupProbeHttpGetHttpHeadersItem struct {
	// The header field name
	Name string `json:"name"`

	// The header field value
	Value string `json:"value"`
}

// SGClusterSpecPodsCustomInitContainersItemStartupProbeTcpSocket defines model for SGClusterSpecPodsCustomInitContainersItemStartupProbeTcpSocket.
type SGClusterSpecPodsCustomInitContainersItemStartupProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// SGClusterSpecPodsCustomInitContainersItemVolumeDevicesItem defines model for SGClusterSpecPodsCustomInitContainersItemVolumeDevicesItem.
type SGClusterSpecPodsCustomInitContainersItemVolumeDevicesItem struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `json:"devicePath"`

	// name must match the name of a persistentVolumeClaim in the pod
	Name string `json:"name"`
}

// SGClusterSpecPodsCustomInitContainersItemVolumeMountsItem defines model for SGClusterSpecPodsCustomInitContainersItemVolumeMountsItem.
type SGClusterSpecPodsCustomInitContainersItemVolumeMountsItem struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `json:"mountPath"`

	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `json:"mountPropagation,omitempty"`

	// This must match the Name of a Volume.
	Name string `json:"name"`

	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`

	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `json:"subPath,omitempty"`

	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `json:"subPathExpr,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItem defines model for SGClusterSpecPodsCustomVolumesItem.
type SGClusterSpecPodsCustomVolumesItem struct {
	// Adapts a ConfigMap into a volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
	ConfigMap *SGClusterSpecPodsCustomVolumesItemConfigMap `json:"configMap,omitempty"`

	// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
	DownwardAPI *SGClusterSpecPodsCustomVolumesItemDownwardAPI `json:"downwardAPI,omitempty"`

	// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
	EmptyDir *SGClusterSpecPodsCustomVolumesItemEmptyDir `json:"emptyDir,omitempty"`

	// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
	//
	// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *SGClusterSpecPodsCustomVolumesItemGitRepo `json:"gitRepo,omitempty"`

	// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
	Glusterfs *SGClusterSpecPodsCustomVolumesItemGlusterfs `json:"glusterfs,omitempty"`

	// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
	HostPath *SGClusterSpecPodsCustomVolumesItemHostPath `json:"hostPath,omitempty"`

	// Volumes name. Must be a DNS_LABEL and unique within the pod.
	//  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	//
	// The name will be prefixed with the string `custom-` so that when referencing them in the
	//  customInitContainers or customContainers sections the name used have to be prepended with
	//  the same prefix.
	Name *string `json:"name,omitempty"`

	// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
	Nfs *SGClusterSpecPodsCustomVolumesItemNfs `json:"nfs,omitempty"`

	// Represents a projected volume source
	Projected *SGClusterSpecPodsCustomVolumesItemProjected `json:"projected,omitempty"`

	// Adapts a Secret into a volume.
	//
	// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
	Secret *SGClusterSpecPodsCustomVolumesItemSecret `json:"secret,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemConfigMap defines model for SGClusterSpecPodsCustomVolumesItemConfigMap.
type SGClusterSpecPodsCustomVolumesItemConfigMap struct {
	// Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`

	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items *[]SGClusterSpecPodsCustomVolumesItemConfigMapItemsItem `json:"items,omitempty"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemConfigMapItemsItem defines model for SGClusterSpecPodsCustomVolumesItemConfigMapItemsItem.
type SGClusterSpecPodsCustomVolumesItemConfigMapItemsItem struct {
	// The key to project.
	Key string `json:"key"`

	// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`

	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// SGClusterSpecPodsCustomVolumesItemDownwardAPI defines model for SGClusterSpecPodsCustomVolumesItemDownwardAPI.
type SGClusterSpecPodsCustomVolumesItemDownwardAPI struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`

	// Items is a list of downward API volume file
	Items *[]SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItem `json:"items,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItem defines model for SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItem.
type SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItem struct {
	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemFieldRef `json:"fieldRef,omitempty"`

	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`

	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `json:"path"`

	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemResourceFieldRef `json:"resourceFieldRef,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemFieldRef defines model for SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemFieldRef.
type SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemResourceFieldRef defines model for SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemResourceFieldRef.
type SGClusterSpecPodsCustomVolumesItemDownwardAPIItemsItemResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`

	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// <quantity>        ::= <signedNumber><suffix>
	//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//   a. No precision is lost
	//   b. No fractional digits will be emitted
	//   c. The exponent (or suffix) is as large as possible.
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//   1.5 will be serialized as "1500m"
	//   1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`

	// Required: resource to select
	Resource string `json:"resource"`
}

// SGClusterSpecPodsCustomVolumesItemEmptyDir defines model for SGClusterSpecPodsCustomVolumesItemEmptyDir.
type SGClusterSpecPodsCustomVolumesItemEmptyDir struct {
	// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `json:"medium,omitempty"`

	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// <quantity>        ::= <signedNumber><suffix>
	//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//   a. No precision is lost
	//   b. No fractional digits will be emitted
	//   c. The exponent (or suffix) is as large as possible.
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//   1.5 will be serialized as "1500m"
	//   1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	SizeLimit *string `json:"sizeLimit,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemGitRepo defines model for SGClusterSpecPodsCustomVolumesItemGitRepo.
type SGClusterSpecPodsCustomVolumesItemGitRepo struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `json:"directory,omitempty"`

	// Repository URL
	Repository string `json:"repository"`

	// Commit hash for the specified revision.
	Revision *string `json:"revision,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemGlusterfs defines model for SGClusterSpecPodsCustomVolumesItemGlusterfs.
type SGClusterSpecPodsCustomVolumesItemGlusterfs struct {
	// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `json:"endpoints"`

	// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `json:"path"`

	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemHostPath defines model for SGClusterSpecPodsCustomVolumesItemHostPath.
type SGClusterSpecPodsCustomVolumesItemHostPath struct {
	// Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `json:"path"`

	// Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `json:"type,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemNfs defines model for SGClusterSpecPodsCustomVolumesItemNfs.
type SGClusterSpecPodsCustomVolumesItemNfs struct {
	// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `json:"path"`

	// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `json:"readOnly,omitempty"`

	// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `json:"server"`
}

// SGClusterSpecPodsCustomVolumesItemProjected defines model for SGClusterSpecPodsCustomVolumesItemProjected.
type SGClusterSpecPodsCustomVolumesItemProjected struct {
	// Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`

	// list of volume projections
	Sources *[]SGClusterSpecPodsCustomVolumesItemProjectedSourcesItem `json:"sources,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItem defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItem.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItem struct {
	// Adapts a ConfigMap into a projected volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
	ConfigMap *SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMap `json:"configMap,omitempty"`

	// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
	DownwardAPI *SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPI `json:"downwardAPI,omitempty"`

	// Adapts a secret into a projected volume.
	//
	// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
	Secret *SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecret `json:"secret,omitempty"`

	// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
	ServiceAccountToken *SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemServiceAccountToken `json:"serviceAccountToken,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMap defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMap.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMap struct {
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items *[]SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMapItemsItem `json:"items,omitempty"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMapItemsItem defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMapItemsItem.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemConfigMapItemsItem struct {
	// The key to project.
	Key string `json:"key"`

	// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`

	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPI defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPI.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPI struct {
	// Items is a list of DownwardAPIVolume file
	Items *[]SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItem `json:"items,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItem defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItem.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItem struct {
	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemFieldRef `json:"fieldRef,omitempty"`

	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`

	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `json:"path"`

	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemResourceFieldRef `json:"resourceFieldRef,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemFieldRef defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemFieldRef.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemResourceFieldRef defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemResourceFieldRef.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemDownwardAPIItemsItemResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`

	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// <quantity>        ::= <signedNumber><suffix>
	//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//   a. No precision is lost
	//   b. No fractional digits will be emitted
	//   c. The exponent (or suffix) is as large as possible.
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//   1.5 will be serialized as "1500m"
	//   1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`

	// Required: resource to select
	Resource string `json:"resource"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecret defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecret.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecret struct {
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items *[]SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecretItemsItem `json:"items,omitempty"`

	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`

	// Specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecretItemsItem defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecretItemsItem.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemSecretItemsItem struct {
	// The key to project.
	Key string `json:"key"`

	// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`

	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemServiceAccountToken defines model for SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemServiceAccountToken.
type SGClusterSpecPodsCustomVolumesItemProjectedSourcesItemServiceAccountToken struct {
	// Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `json:"audience,omitempty"`

	// ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int64 `json:"expirationSeconds,omitempty"`

	// Path is the path relative to the mount point of the file to project the token into.
	Path string `json:"path"`
}

// SGClusterSpecPodsCustomVolumesItemSecret defines model for SGClusterSpecPodsCustomVolumesItemSecret.
type SGClusterSpecPodsCustomVolumesItemSecret struct {
	// Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`

	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items *[]SGClusterSpecPodsCustomVolumesItemSecretItemsItem `json:"items,omitempty"`

	// Specify whether the Secret or its keys must be defined
	Optional *bool `json:"optional,omitempty"`

	// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `json:"secretName,omitempty"`
}

// SGClusterSpecPodsCustomVolumesItemSecretItemsItem defines model for SGClusterSpecPodsCustomVolumesItemSecretItemsItem.
type SGClusterSpecPodsCustomVolumesItemSecretItemsItem struct {
	// The key to project.
	Key string `json:"key"`

	// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`

	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// SGClusterSpecPodsPersistentVolume defines model for SGClusterSpecPodsPersistentVolume.
type SGClusterSpecPodsPersistentVolume struct {
	// Size of the PersistentVolume set for each instance of the cluster. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).
	Size string `json:"size"`

	// Name of an existing StorageClass in the Kubernetes cluster, used to create the PersistentVolumes for the instances of the cluster.
	StorageClass *string `json:"storageClass,omitempty"`
}

// SGClusterSpecPodsResources defines model for SGClusterSpecPodsResources.
type SGClusterSpecPodsResources struct {
	// When enabled resource limits for containers other than the patroni container wil be set just like for patroni contianer as specified in the SGInstanceProfile.
	EnableClusterLimitsRequirements *bool `json:"enableClusterLimitsRequirements,omitempty"`
}

// SGClusterSpecPodsScheduling defines model for SGClusterSpecPodsScheduling.
type SGClusterSpecPodsScheduling struct {
	// Backup Pod custom scheduling and affinity configuration.
	Backup *SGClusterSpecPodsSchedulingBackup `json:"backup,omitempty"`

	// Node affinity is a group of node affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#nodeaffinity-v1-core
	NodeAffinity *SGClusterSpecPodsSchedulingNodeAffinity `json:"nodeAffinity,omitempty"`

	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// Pod affinity is a group of inter pod affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podaffinity-v1-core
	PodAffinity *SGClusterSpecPodsSchedulingPodAffinity `json:"podAffinity,omitempty"`

	// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podantiaffinity-v1-core
	PodAntiAffinity *SGClusterSpecPodsSchedulingPodAntiAffinity `json:"podAntiAffinity,omitempty"`

	// If specified, the pod's tolerations.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
	Tolerations *[]SGClusterSpecPodsSchedulingTolerationsItem `json:"tolerations,omitempty"`

	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints *[]SGClusterSpecPodsSchedulingTopologySpreadConstraintsItem `json:"topologySpreadConstraints,omitempty"`
}

// SGClusterSpecPodsSchedulingBackup defines model for SGClusterSpecPodsSchedulingBackup.
type SGClusterSpecPodsSchedulingBackup struct {
	// Node affinity is a group of node affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#nodeaffinity-v1-core
	NodeAffinity *SGClusterSpecPodsSchedulingBackupNodeAffinity `json:"nodeAffinity,omitempty"`

	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// Pod affinity is a group of inter pod affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podaffinity-v1-core
	PodAffinity *SGClusterSpecPodsSchedulingBackupPodAffinity `json:"podAffinity,omitempty"`

	// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podantiaffinity-v1-core
	PodAntiAffinity *SGClusterSpecPodsSchedulingBackupPodAntiAffinity `json:"podAntiAffinity,omitempty"`

	// If specified, the pod's tolerations.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
	Tolerations *[]SGClusterSpecPodsSchedulingBackupTolerationsItem `json:"tolerations,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinity defines model for SGClusterSpecPodsSchedulingBackupNodeAffinity.
type SGClusterSpecPodsSchedulingBackupNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	RequiredDuringSchedulingIgnoredDuringExecution *SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
	Preference SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference `json:"preference"`

	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.
type SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields *[]SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem `json:"matchFields,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem.
type SGClusterSpecPodsSchedulingBackupNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.
type SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem `json:"nodeSelectorTerms"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.
type SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields *[]SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem `json:"matchFields,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem defines model for SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem.
type SGClusterSpecPodsSchedulingBackupNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinity defines model for SGClusterSpecPodsSchedulingBackupPodAffinity.
type SGClusterSpecPodsSchedulingBackupPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`

	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm defines model for SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.
type SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector defines model for SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector defines model for SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector defines model for SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector defines model for SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinity defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinity.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`

	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingBackupPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingBackupTolerationsItem defines model for SGClusterSpecPodsSchedulingBackupTolerationsItem.
type SGClusterSpecPodsSchedulingBackupTolerationsItem struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	//
	Effect *string `json:"effect,omitempty"`

	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `json:"key,omitempty"`

	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	//
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int64 `json:"tolerationSeconds,omitempty"`

	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinity defines model for SGClusterSpecPodsSchedulingNodeAffinity.
type SGClusterSpecPodsSchedulingNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	RequiredDuringSchedulingIgnoredDuringExecution *SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
	Preference SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference `json:"preference"`

	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference defines model for SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.
type SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields *[]SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem `json:"matchFields,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem.
type SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem defines model for SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem.
type SGClusterSpecPodsSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution defines model for SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.
type SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem `json:"nodeSelectorTerms"`
}

// SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem defines model for SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.
type SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields *[]SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem `json:"matchFields,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem.
type SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem defines model for SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem.
type SGClusterSpecPodsSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinity defines model for SGClusterSpecPodsSchedulingPodAffinity.
type SGClusterSpecPodsSchedulingPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`

	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm defines model for SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.
type SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector defines model for SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector defines model for SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector defines model for SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector defines model for SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinity defines model for SGClusterSpecPodsSchedulingPodAntiAffinity.
type SGClusterSpecPodsSchedulingPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution *[]SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`

	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm defines model for SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.
type SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector defines model for SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector defines model for SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem defines model for SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.
type SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector defines model for SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector defines model for SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPodsSchedulingTolerationsItem defines model for SGClusterSpecPodsSchedulingTolerationsItem.
type SGClusterSpecPodsSchedulingTolerationsItem struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	//
	Effect *string `json:"effect,omitempty"`

	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `json:"key,omitempty"`

	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	//
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int64 `json:"tolerationSeconds,omitempty"`

	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty"`
}

// SGClusterSpecPodsSchedulingTopologySpreadConstraintsItem defines model for SGClusterSpecPodsSchedulingTopologySpreadConstraintsItem.
type SGClusterSpecPodsSchedulingTopologySpreadConstraintsItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelector `json:"labelSelector,omitempty"`

	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew int32 `json:"maxSkew"`

	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int32 `json:"minDomains,omitempty"`

	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty"`

	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty"`

	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey string `json:"topologyKey"`

	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	//
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

// SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelector defines model for SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelector.
type SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelectorMatchExpressionsItem defines model for SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelectorMatchExpressionsItem.
type SGClusterSpecPodsSchedulingTopologySpreadConstraintsItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGClusterSpecPostgres defines model for SGClusterSpecPostgres.
type SGClusterSpecPostgres struct {
	// StackGres support deploy of extensions at runtime by simply adding an entry to this array. A deployed extension still
	// requires the creation in a database using the [`CREATE EXTENSION`](https://www.postgresql.org/docs/current/sql-createextension.html)
	// statement. After an extension is deployed correctly it will be present until removed and the cluster restarted.
	//
	// A cluster restart is required for:
	// * Extensions that requires to add an entry to [`shared_preload_libraries`](https://postgresqlco.nf/en/doc/param/shared_preload_libraries/) configuration parameter.
	// * Upgrading extensions that overwrite any file that is not the extension''s control file or extension''s script file.
	// * Removing extensions. Until the cluster is not restarted a removed extension will still be available.
	// * Install of extensions that require extra mount. After installed the cluster will require to be restarted.
	Extensions *[]SGClusterSpecPostgresExtensionsItem `json:"extensions,omitempty"`

	// Postgres flavor used on the cluster. It is either of:
	// *  `babelfish` will use the [Babelfish for Postgres](https://babelfish-for-postgresql.github.io/babelfish-for-postgresql/).
	//
	// If not specified then the vanilla Postgres will be used for the cluster.
	Flavor *string `json:"flavor,omitempty"`

	// This section allows to use SSL when connecting to Postgres
	Ssl *SGClusterSpecPostgresSsl `json:"ssl,omitempty"`

	// Postgres version used on the cluster. It is either of:
	// *  The string 'latest', which automatically sets the latest major.minor Postgres version.
	// *  A major version, like '14' or '13', which sets that major version and the latest minor version.
	// *  A specific major.minor version, like '14.4'.
	Version string `json:"version"`
}

// SGClusterSpecPostgresExtensionsItem defines model for SGClusterSpecPostgresExtensionsItem.
type SGClusterSpecPostgresExtensionsItem struct {
	// The name of the extension to deploy.
	Name string `json:"name"`

	// The id of the publisher of the extension to deploy. If not specified `com.ongres` will be used by default.
	Publisher *string `json:"publisher,omitempty"`

	// The repository base URL from where to obtain the extension to deploy. If not specified https://stackgres.io/downloads/postgres/extensions will be used by default (or the value specified during operator deployment).
	Repository *string `json:"repository,omitempty"`

	// The version of the extension to deploy. If not specified version of `stable` channel will be used by default.
	Version *string `json:"version,omitempty"`
}

// SGClusterSpecPostgresSsl defines model for SGClusterSpecPostgresSsl.
type SGClusterSpecPostgresSsl struct {
	// Secret key selector for the certificate or certificate chain used for SSL connections.
	CertificateSecretKeySelector *SGClusterSpecPostgresSslCertificateSecretKeySelector `json:"certificateSecretKeySelector,omitempty"`

	// Allow to enable SSL for connections to Postgres. By default is `false`.
	//
	// If `true` fields `certificateSecretKeySelector` and `privateKeySecretKeySelector` will be required.
	Enabled *bool `json:"enabled,omitempty"`

	// Secret key selector for the private key used for SSL connections.
	PrivateKeySecretKeySelector *SGClusterSpecPostgresSslPrivateKeySecretKeySelector `json:"privateKeySecretKeySelector,omitempty"`
}

// SGClusterSpecPostgresSslCertificateSecretKeySelector defines model for SGClusterSpecPostgresSslCertificateSecretKeySelector.
type SGClusterSpecPostgresSslCertificateSecretKeySelector struct {
	// The key of Secret that contains the certificate or certificate chain for SSL connections
	Key string `json:"key"`

	// The name of Secret that contains the certificate or certificate chain for SSL connections
	Name string `json:"name"`
}

// SGClusterSpecPostgresSslPrivateKeySecretKeySelector defines model for SGClusterSpecPostgresSslPrivateKeySecretKeySelector.
type SGClusterSpecPostgresSslPrivateKeySecretKeySelector struct {
	// The key of Secret that contains the private key for SSL connections
	Key string `json:"key"`

	// The name of Secret that contains the private key for SSL connections
	Name string `json:"name"`
}

// SGClusterSpecPostgresServices defines model for SGClusterSpecPostgresServices.
type SGClusterSpecPostgresServices struct {
	// Configuration for the `-primary` service. It provides a stable connection (regardless of primary failures or switchovers) to the read-write Postgres server of the cluster.
	Primary *SGClusterSpecPostgresServicesPrimary `json:"primary,omitempty"`

	// Configuration for the `-replicas` service. It provides a stable connection (regardless of replica node failures) to any read-only Postgres server of the cluster. Read-only servers are load-balanced via this service.
	Replicas *SGClusterSpecPostgresServicesReplicas `json:"replicas,omitempty"`
}

// SGClusterSpecPostgresServicesPrimary defines model for SGClusterSpecPostgresServicesPrimary.
type SGClusterSpecPostgresServicesPrimary struct {
	// The list of custom ports that will be exposed by the Postgres primary service.
	//
	// The names of custom ports will be prefixed with the string `custom-` so they do not
	//  conflict with ports defined for the primary service.
	//
	// The names of target ports will be prefixed with the string `custom-` so that the ports
	//  that can be referenced in this section will be only those defined under
	//  .spec.pods.customContainers[].ports sections were names are also prepended with the same
	//  prefix.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#serviceport-v1-core
	CustomPorts *[]SGClusterSpecPostgresServicesPrimaryCustomPortsItem `json:"customPorts,omitempty"`

	// Specify if the `-primary` service should be created or not.
	Enabled *bool `json:"enabled,omitempty"`

	// Specify custom external IPs for Postgres primary service
	ExternalIPs *[]string `json:"externalIPs,omitempty"`

	// Specify loadBalancer IP for Postgres primary service
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`

	// Specifies the type of Kubernetes service.
	Type *string `json:"type,omitempty"`
}

// SGClusterSpecPostgresServicesPrimaryCustomPortsItem defines model for SGClusterSpecPostgresServicesPrimaryCustomPortsItem.
type SGClusterSpecPostgresServicesPrimaryCustomPortsItem struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`

	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `json:"name,omitempty"`

	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int32 `json:"nodePort,omitempty"`

	// The port that will be exposed by this service.
	Port int32 `json:"port"`

	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `json:"protocol,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When
	//  used in JSON or YAML marshalling and unmarshalling, it produces
	//  or consumes the inner type.  This allows you to have, for example,
	//  a JSON field that can accept a name or number.
	//
	// The name will be prefixed with the string `custom-` so that the target port that can be
	//  referenced will be only those defined under .spec.pods.customContainers[].ports sections
	//  were names are also prepended with the same prefix.
	TargetPort *string `json:"targetPort,omitempty"`
}

// SGClusterSpecPostgresServicesReplicas defines model for SGClusterSpecPostgresServicesReplicas.
type SGClusterSpecPostgresServicesReplicas struct {
	// The list of custom ports that will be exposed by the Postgres replicas service.
	//
	// The names of custom ports will be prefixed with the string `custom-` so they do not
	//  conflict with ports defined for the replicas service.
	//
	// The names of target ports will be prefixed with the string `custom-` so that the ports
	//  that can be referenced in this section will be only those defined under
	//  .spec.pods.customContainers[].ports sections were names are also prepended with the same
	//  prefix.
	CustomPorts *[]SGClusterSpecPostgresServicesReplicasCustomPortsItem `json:"customPorts,omitempty"`

	// Specify if the `-replicas` service should be created or not.
	Enabled *bool `json:"enabled,omitempty"`

	// Specify the custom external IPs for Postgres replicas service
	ExternalIPs *[]string `json:"externalIPs,omitempty"`

	// Specify loadBalancer IP for Postgres replica service
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`

	// Specifies the type of Kubernetes service.
	Type *string `json:"type,omitempty"`
}

// SGClusterSpecPostgresServicesReplicasCustomPortsItem defines model for SGClusterSpecPostgresServicesReplicasCustomPortsItem.
type SGClusterSpecPostgresServicesReplicasCustomPortsItem struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`

	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `json:"name,omitempty"`

	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int32 `json:"nodePort,omitempty"`

	// The port that will be exposed by this service.
	Port int32 `json:"port"`

	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `json:"protocol,omitempty"`

	// IntOrString is a type that can hold an int32 or a string.  When
	//  used in JSON or YAML marshalling and unmarshalling, it produces
	//  or consumes the inner type.  This allows you to have, for example,
	//  a JSON field that can accept a name or number.
	//
	// The name will be prefixed with the string `custom-` so that the target port that can be
	//  referenced will be only those defined under .spec.pods.customContainers[].ports sections
	//  were names are also prepended with the same prefix.
	TargetPort *string `json:"targetPort,omitempty"`
}

// SGClusterSpecReplicateFrom defines model for SGClusterSpecReplicateFrom.
type SGClusterSpecReplicateFrom struct {
	// Configure replication from a PostgreSQL instance.
	Instance *SGClusterSpecReplicateFromInstance `json:"instance,omitempty"`

	// Configure replication from an SGObjectStorage using WAL shipping.
	//
	// The file structure of the object storage must follow the
	//  [WAL-G](https://github.com/wal-g/wal-g) file structure.
	Storage *SGClusterSpecReplicateFromStorage `json:"storage,omitempty"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the users.
	Users *SGClusterSpecReplicateFromUsers `json:"users,omitempty"`
}

// SGClusterSpecReplicateFromInstance defines model for SGClusterSpecReplicateFromInstance.
type SGClusterSpecReplicateFromInstance struct {
	// Configure replication from an external PostgreSQL instance.
	External *SGClusterSpecReplicateFromInstanceExternal `json:"external,omitempty"`

	// Configure replication from an SGCluster.
	SgCluster *string `json:"sgCluster,omitempty"`
}

// SGClusterSpecReplicateFromInstanceExternal defines model for SGClusterSpecReplicateFromInstanceExternal.
type SGClusterSpecReplicateFromInstanceExternal struct {
	// The host of the PostgreSQL to replicate from.
	Host string `json:"host"`

	// The port of the PostgreSQL to replicate from.
	Port int `json:"port"`
}

// SGClusterSpecReplicateFromStorage defines model for SGClusterSpecReplicateFromStorage.
type SGClusterSpecReplicateFromStorage struct {
	// The path in the SGObjectStorage to replicate from.
	Path string `json:"path"`

	// Configuration that affects the backup network and disk usage performance.
	Performance *SGClusterSpecReplicateFromStoragePerformance `json:"performance,omitempty"`

	// The SGObjectStorage name to replicate from.
	SgObjectStorage string `json:"sgObjectStorage"`
}

// SGClusterSpecReplicateFromStoragePerformance defines model for SGClusterSpecReplicateFromStoragePerformance.
type SGClusterSpecReplicateFromStoragePerformance struct {
	// Backup storage may use several concurrent streams to read the data. This parameter configures the number of parallel streams to use. By default, it's set to the minimum between the number of file to read and 10.
	DownloadConcurrency *int `json:"downloadConcurrency,omitempty"`

	// Maximum disk read I/O when performing a backup. In bytes (per second).
	MaxDiskBandwidth *int `json:"maxDiskBandwidth,omitempty"`

	// Maximum storage upload bandwidth used when storing a backup. In bytes (per second).
	MaxNetworkBandwidth *int `json:"maxNetworkBandwidth,omitempty"`
}

// SGClusterSpecReplicateFromUsers defines model for SGClusterSpecReplicateFromUsers.
type SGClusterSpecReplicateFromUsers struct {
	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the authenticator user used by pgbouncer to authenticate other users.
	Authenticator SGClusterSpecReplicateFromUsersAuthenticator `json:"authenticator"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the replication user used to replicate from the primary cluster and from replicas of this cluster.
	Replication SGClusterSpecReplicateFromUsersReplication `json:"replication"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the superuser (usually the postgres user).
	Superuser SGClusterSpecReplicateFromUsersSuperuser `json:"superuser"`
}

// SGClusterSpecReplicateFromUsersAuthenticator defines model for SGClusterSpecReplicateFromUsersAuthenticator.
type SGClusterSpecReplicateFromUsersAuthenticator struct {
	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the password of the user.
	Password SGClusterSpecReplicateFromUsersAuthenticatorPassword `json:"password"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the username of the user.
	Username SGClusterSpecReplicateFromUsersAuthenticatorUsername `json:"username"`
}

// SGClusterSpecReplicateFromUsersAuthenticatorPassword defines model for SGClusterSpecReplicateFromUsersAuthenticatorPassword.
type SGClusterSpecReplicateFromUsersAuthenticatorPassword struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name string `json:"name"`
}

// SGClusterSpecReplicateFromUsersAuthenticatorUsername defines model for SGClusterSpecReplicateFromUsersAuthenticatorUsername.
type SGClusterSpecReplicateFromUsersAuthenticatorUsername struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name string `json:"name"`
}

// SGClusterSpecReplicateFromUsersReplication defines model for SGClusterSpecReplicateFromUsersReplication.
type SGClusterSpecReplicateFromUsersReplication struct {
	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the password of the user.
	Password SGClusterSpecReplicateFromUsersReplicationPassword `json:"password"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the username of the user.
	Username SGClusterSpecReplicateFromUsersReplicationUsername `json:"username"`
}

// SGClusterSpecReplicateFromUsersReplicationPassword defines model for SGClusterSpecReplicateFromUsersReplicationPassword.
type SGClusterSpecReplicateFromUsersReplicationPassword struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name string `json:"name"`
}

// SGClusterSpecReplicateFromUsersReplicationUsername defines model for SGClusterSpecReplicateFromUsersReplicationUsername.
type SGClusterSpecReplicateFromUsersReplicationUsername struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name string `json:"name"`
}

// SGClusterSpecReplicateFromUsersSuperuser defines model for SGClusterSpecReplicateFromUsersSuperuser.
type SGClusterSpecReplicateFromUsersSuperuser struct {
	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the password of the user.
	Password SGClusterSpecReplicateFromUsersSuperuserPassword `json:"password"`

	// A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the username of the user.
	Username SGClusterSpecReplicateFromUsersSuperuserUsername `json:"username"`
}

// SGClusterSpecReplicateFromUsersSuperuserPassword defines model for SGClusterSpecReplicateFromUsersSuperuserPassword.
type SGClusterSpecReplicateFromUsersSuperuserPassword struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name string `json:"name"`
}

// SGClusterSpecReplicateFromUsersSuperuserUsername defines model for SGClusterSpecReplicateFromUsersSuperuserUsername.
type SGClusterSpecReplicateFromUsersSuperuserUsername struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `json:"key"`

	// Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name string `json:"name"`
}

// SGClusterSpecReplication defines model for SGClusterSpecReplication.
type SGClusterSpecReplication struct {
	// StackGres support replication groups where a replication group of a specified number of instances could have different
	//  replication role. The main replication group is implicit and contains the total number of instances less the sum of all
	//  instances in other replication groups.
	Groups *[]SGClusterSpecReplicationGroupsItem `json:"groups,omitempty"`

	// The replication mode applied to the whole cluster.
	// Possible values are:
	// * `async` (default)
	// * `sync`
	// * `strict-sync`
	//
	// ### `async` Mode
	//
	// When in asynchronous mode the cluster is allowed to lose some committed transactions.
	//  When the primary server fails or becomes unavailable for any other reason a sufficiently healthy standby
	//  will automatically be promoted to primary. Any transactions that have not been replicated to that standby
	//  remain in a "forked timeline" on the primary, and are effectively unrecoverable (the data is still there,
	//  but recovering it requires a manual recovery effort by data recovery specialists).
	//
	// ### `sync` Mode
	//
	// When in synchronous mode a standby will not be promoted unless it is certain that the standby contains all
	//  transactions that may have returned a successful commit status to client (clients can change the behavior
	//  per transaction using PostgreSQL’s `synchronous_commit` setting. Transactions with `synchronous_commit`
	//  values of `off` and `local` may be lost on fail over, but will not be blocked by replication delays). This
	//  means that the system may be unavailable for writes even though some servers are available. System
	//  administrators can still use manual failover commands to promote a standby even if it results in transaction
	//  loss.
	//
	// Synchronous mode does not guarantee multi node durability of commits under all circumstances. When no suitable
	//  standby is available, primary server will still accept writes, but does not guarantee their replication. When
	//  the primary fails in this mode no standby will be promoted. When the host that used to be the primary comes
	//  back it will get promoted automatically, unless system administrator performed a manual failover. This behavior
	//  makes synchronous mode usable with 2 node clusters.
	//
	// When synchronous mode is used and a standby crashes, commits will block until the primary is switched to standalone
	//  mode. Manually shutting down or restarting a standby will not cause a commit service interruption. Standby will
	//  signal the primary to release itself from synchronous standby duties before PostgreSQL shutdown is initiated.
	//
	// ### `strict-sync` Mode
	//
	// When it is absolutely necessary to guarantee that each write is stored durably on at least two nodes, use the strict
	//  synchronous mode. This mode prevents synchronous replication to be switched off on the primary when no synchronous
	//  standby candidates are available. As a downside, the primary will not be available for writes (unless the Postgres
	//  transaction explicitly turns off `synchronous_mode` parameter), blocking all client write requests until at least one
	//  synchronous replica comes up.
	//
	// **Note**: Because of the way synchronous replication is implemented in PostgreSQL it is still possible to lose
	//  transactions even when using strict synchronous mode. If the PostgreSQL backend is cancelled while waiting to acknowledge
	//  replication (as a result of packet cancellation due to client timeout or backend failure) transaction changes become
	//  visible for other backends. Such changes are not yet replicated and may be lost in case of standby promotion.
	Mode *string `json:"mode,omitempty"`

	// This role is applied to the instances of the implicit replication group that is composed by `.spec.instances` number of instances.
	// Possible values are:
	// * `ha-read` (default)
	// * `ha`
	// The primary instance will be elected among all the replication groups that are either `ha` or `ha-read`.
	// Only if the role is set to `ha-read` instances of main replication group will be exposed via the replicas service.
	Role *string `json:"role,omitempty"`

	// Number of synchronous standby instances. Must be less than the total number of instances. It is set to 1 by default.
	//  Only setteable if mode is `sync` or `strict-sync`.
	SyncInstances *int `json:"syncInstances,omitempty"`
}

// SGClusterSpecReplicationGroupsItem defines model for SGClusterSpecReplicationGroupsItem.
type SGClusterSpecReplicationGroupsItem struct {
	// Number of StackGres instances for this replication group.
	//
	// The total number of instance of a cluster is always `.spec.instances`. The sum of the instances in the replication group must be
	//  less than the total number of instances.
	Instances int `json:"instances"`

	// The name of the replication group. If not set will default to the `group-<index>`.
	Name *string `json:"name,omitempty"`

	// This role is applied to the instances of this replication group.
	// Possible values are:
	// * `ha-read`
	// * `ha`
	// * `readonly`
	// * `none`
	// The primary instance will be elected among all the replication groups that are either `ha` or `ha-read`.
	// Only if the role is set to `readonly` or `ha-read` instances of such replication group will be exposed via the replicas service.
	Role string `json:"role"`
}

// SGClusterSpecToInstallPostgresExtensionsItem defines model for SGClusterSpecToInstallPostgresExtensionsItem.
type SGClusterSpecToInstallPostgresExtensionsItem struct {
	// The build version of the extension to install.
	Build *string `json:"build,omitempty"`

	// The extra mounts of the extension to install.
	ExtraMounts *[]string `json:"extraMounts,omitempty"`

	// The name of the extension to install.
	Name string `json:"name"`

	// The postgres major version of the extension to install.
	PostgresVersion string `json:"postgresVersion"`

	// The id of the publisher of the extension to install.
	Publisher string `json:"publisher"`

	// The repository base URL from where the extension will be installed from.
	Repository string `json:"repository"`

	// The version of the extension to install.
	Version string `json:"version"`
}

// SGClusterStatus defines model for SGClusterStatus.
type SGClusterStatus struct {
	// The architecture on which the cluster has been initialized.
	Arch       *string                          `json:"arch,omitempty"`
	Conditions *[]SGClusterStatusConditionsItem `json:"conditions,omitempty"`

	// Used by some [SGDbOps](https://stackgres.io/doc/latest/reference/crd/sgdbops) to indicate the operation configuration and status to the operator.
	DbOps *SGClusterStatusDbOps `json:"dbOps,omitempty"`

	// The custom prefix that is prepended to all labels.
	LabelPrefix *string `json:"labelPrefix,omitempty"`

	// This section stores the state of referenced SQL scripts that are applied to the cluster live.
	ManagedSql *SGClusterStatusManagedSql `json:"managedSql,omitempty"`

	// The operative system on which the cluster has been initialized.
	Os *string `json:"os,omitempty"`

	// The list of pod statuses.
	PodStatuses *[]SGClusterStatusPodStatusesItem `json:"podStatuses,omitempty"`
}

// SGClusterStatusConditionsItem defines model for SGClusterStatusConditionsItem.
type SGClusterStatusConditionsItem struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`

	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`

	// Status of the condition, one of True, False, Unknown.
	Status *string `json:"status,omitempty"`

	// Type of deployment condition.
	Type *string `json:"type,omitempty"`
}

// SGClusterStatusDbOps defines model for SGClusterStatusDbOps.
type SGClusterStatusDbOps struct {
	// The major version upgrade configuration and status
	MajorVersionUpgrade *SGClusterStatusDbOpsMajorVersionUpgrade `json:"majorVersionUpgrade,omitempty"`

	// The minor version upgrade configuration and status
	MinorVersionUpgrade *SGClusterStatusDbOpsMinorVersionUpgrade `json:"minorVersionUpgrade,omitempty"`

	// The minor version upgrade configuration and status
	Restart *SGClusterStatusDbOpsRestart `json:"restart,omitempty"`

	// The minor version upgrade configuration and status
	SecurityUpgrade *SGClusterStatusDbOpsSecurityUpgrade `json:"securityUpgrade,omitempty"`
}

// SGClusterStatusDbOpsMajorVersionUpgrade defines model for SGClusterStatusDbOpsMajorVersionUpgrade.
type SGClusterStatusDbOpsMajorVersionUpgrade struct {
	// Run `pg_upgrade` with check option instead of performing the real upgrade
	Check *bool `json:"check,omitempty"`

	// Use `--clone` option when running `pg_upgrade`
	Clone *bool `json:"clone,omitempty"`

	// Indicates if PostgreSQL data checksum is enabled
	DataChecksum *bool `json:"dataChecksum,omitempty"`

	// The PostgreSQL encoding
	Encoding *string `json:"encoding,omitempty"`

	// The instances that this operation is targetting
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// Use `--link` option when running `pg_upgrade`
	Link *bool `json:"link,omitempty"`

	// The PostgreSQL locale
	Locale *string `json:"locale,omitempty"`

	// The primary instance that this operation is targetting
	PrimaryInstance *string `json:"primaryInstance,omitempty"`

	// Indicates to rollback from a previous major version upgrade
	Rollback *bool `json:"rollback,omitempty"`

	// The source backup path
	SourceBackupPath *string `json:"sourceBackupPath,omitempty"`

	// The source PostgreSQL version
	SourcePostgresVersion *string `json:"sourcePostgresVersion,omitempty"`

	// The source SGPostgresConfig reference
	SourceSgPostgresConfig *string `json:"sourceSgPostgresConfig,omitempty"`

	// The target PostgreSQL version
	TargetPostgresVersion *string `json:"targetPostgresVersion,omitempty"`
}

// SGClusterStatusDbOpsMinorVersionUpgrade defines model for SGClusterStatusDbOpsMinorVersionUpgrade.
type SGClusterStatusDbOpsMinorVersionUpgrade struct {
	// The instances that this operation is targetting
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The primary instance that this operation is targetting
	PrimaryInstance *string `json:"primaryInstance,omitempty"`

	// Postgres version that is currently running on the cluster
	SourcePostgresVersion *string `json:"sourcePostgresVersion,omitempty"`

	// The desired Postgres version for the cluster
	TargetPostgresVersion *string `json:"targetPostgresVersion,omitempty"`
}

// SGClusterStatusDbOpsRestart defines model for SGClusterStatusDbOpsRestart.
type SGClusterStatusDbOpsRestart struct {
	// The instances that this operation is targetting
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The primary instance that this operation is targetting
	PrimaryInstance *string `json:"primaryInstance,omitempty"`
}

// SGClusterStatusDbOpsSecurityUpgrade defines model for SGClusterStatusDbOpsSecurityUpgrade.
type SGClusterStatusDbOpsSecurityUpgrade struct {
	// The instances that this operation is targetting
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The primary instance that this operation is targetting
	PrimaryInstance *string `json:"primaryInstance,omitempty"`
}

// SGClusterStatusManagedSql defines model for SGClusterStatusManagedSql.
type SGClusterStatusManagedSql struct {
	// A list of statuses for script references.
	Scripts *[]SGClusterStatusManagedSqlScriptsItem `json:"scripts,omitempty"`
}

// SGClusterStatusManagedSqlScriptsItem defines model for SGClusterStatusManagedSqlScriptsItem.
type SGClusterStatusManagedSqlScriptsItem struct {
	// ISO-8601 datetime of when the script execution had completed (mutually exclusive with `failedAt`).
	CompletedAt *string `json:"completedAt,omitempty"`

	// ISO-8601 datetime of when the script execution had failed (mutually exclusive with `completedAt`).
	FailedAt *string `json:"failedAt,omitempty"`

	// Identify the associated `SGScript` entry with the same value in the `id` field.
	Id *int `json:"id,omitempty"`

	// A list of statuses for script entries of referenced script.
	Scripts *[]SGClusterStatusManagedSqlScriptsItemScriptsItem `json:"scripts,omitempty"`

	// ISO-8601 datetime of when the script execution has been started.
	StartedAt *string `json:"startedAt,omitempty"`

	// ISO-8601 datetime of when the last script execution occurred. Will be reset each time the referenced `SGScripts` entry will be applied.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// SGClusterStatusManagedSqlScriptsItemScriptsItem defines model for SGClusterStatusManagedSqlScriptsItemScriptsItem.
type SGClusterStatusManagedSqlScriptsItemScriptsItem struct {
	// If failed, a message of the failure
	Failure *string `json:"failure,omitempty"`

	// If failed, the error code of the failure. See also https://www.postgresql.org/docs/current/errcodes-appendix.html
	FailureCode *string `json:"failureCode,omitempty"`

	// Identify the associated script entry with the same value in the `id` field.
	Id *int `json:"id,omitempty"`

	// Indicates the number of intents or failures occurred
	Intents *int `json:"intents,omitempty"`

	// The latest version applied
	Version *int `json:"version,omitempty"`
}

// SGClusterStatusPodStatusesItem defines model for SGClusterStatusPodStatusesItem.
type SGClusterStatusPodStatusesItem struct {
	// The list of Postgres extensions currently installed.
	InstalledPostgresExtensions *[]SGClusterStatusPodStatusesItemInstalledPostgresExtensionsItem `json:"installedPostgresExtensions,omitempty"`

	// The name of the pod.
	Name string `json:"name"`

	// Indicates if the pod requires restart
	PendingRestart *bool `json:"pendingRestart,omitempty"`

	// Indicates if the pod is the elected primary
	Primary *bool `json:"primary,omitempty"`

	// Indicates the replication group this Pod belongs to.
	ReplicationGroup *int `json:"replicationGroup,omitempty"`
}

// SGClusterStatusPodStatusesItemInstalledPostgresExtensionsItem defines model for SGClusterStatusPodStatusesItemInstalledPostgresExtensionsItem.
type SGClusterStatusPodStatusesItemInstalledPostgresExtensionsItem struct {
	// The build version of the installed extension.
	Build *string `json:"build,omitempty"`

	// The extra mounts of the installed extension.
	ExtraMounts *[]string `json:"extraMounts,omitempty"`

	// The name of the installed extension.
	Name string `json:"name"`

	// The postgres major version of the installed extension.
	PostgresVersion string `json:"postgresVersion"`

	// The id of the publisher of the installed extension.
	Publisher string `json:"publisher"`

	// The repository base URL from where the extension was installed from.
	Repository string `json:"repository"`

	// The version of the installed extension.
	Version string `json:"version"`
}
