// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apiserver/vshn/postgres/backups.go
//
// Generated by this command:
//
//	mockgen -source=pkg/apiserver/vshn/postgres/backups.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/vshn/appcat/v4/apis/apiserver/v1"
	gomock "go.uber.org/mock/gomock"
	internalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
	dynamic "k8s.io/client-go/dynamic"
)

// MockbackupProvider is a mock of backupProvider interface.
type MockbackupProvider struct {
	ctrl     *gomock.Controller
	recorder *MockbackupProviderMockRecorder
	isgomock struct{}
}

// MockbackupProviderMockRecorder is the mock recorder for MockbackupProvider.
type MockbackupProviderMockRecorder struct {
	mock *MockbackupProvider
}

// NewMockbackupProvider creates a new mock instance.
func NewMockbackupProvider(ctrl *gomock.Controller) *MockbackupProvider {
	mock := &MockbackupProvider{ctrl: ctrl}
	mock.recorder = &MockbackupProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbackupProvider) EXPECT() *MockbackupProviderMockRecorder {
	return m.recorder
}

// GetBackup mocks base method.
func (m *MockbackupProvider) GetBackup(ctx context.Context, name, namespace string, arg3 schema.GroupVersionResource, client *dynamic.DynamicClient) (*v1.BackupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackup", ctx, name, namespace, arg3, client)
	ret0, _ := ret[0].(*v1.BackupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackup indicates an expected call of GetBackup.
func (mr *MockbackupProviderMockRecorder) GetBackup(ctx, name, namespace, arg3, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackup", reflect.TypeOf((*MockbackupProvider)(nil).GetBackup), ctx, name, namespace, arg3, client)
}

// ListBackup mocks base method.
func (m *MockbackupProvider) ListBackup(ctx context.Context, namespace string, arg2 schema.GroupVersionResource, client *dynamic.DynamicClient, options *internalversion.ListOptions) (*[]v1.BackupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackup", ctx, namespace, arg2, client, options)
	ret0, _ := ret[0].(*[]v1.BackupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackup indicates an expected call of ListBackup.
func (mr *MockbackupProviderMockRecorder) ListBackup(ctx, namespace, arg2, client, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackup", reflect.TypeOf((*MockbackupProvider)(nil).ListBackup), ctx, namespace, arg2, client, options)
}

// WatchBackup mocks base method.
func (m *MockbackupProvider) WatchBackup(ctx context.Context, namespace string, options *internalversion.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchBackup", ctx, namespace, options)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchBackup indicates an expected call of WatchBackup.
func (mr *MockbackupProviderMockRecorder) WatchBackup(ctx, namespace, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchBackup", reflect.TypeOf((*MockbackupProvider)(nil).WatchBackup), ctx, namespace, options)
}
