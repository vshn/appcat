// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apiserver/vshn/postgres/vshnpostgresql.go
//
// Generated by this command:
//
//	mockgen -source=pkg/apiserver/vshn/postgres/vshnpostgresql.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/vshn/appcat/v4/apis/vshn/v1"
	gomock "go.uber.org/mock/gomock"
	meta "k8s.io/apimachinery/pkg/api/meta"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
	dynamic "k8s.io/client-go/dynamic"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockvshnPostgresqlProvider is a mock of vshnPostgresqlProvider interface.
type MockvshnPostgresqlProvider struct {
	ctrl     *gomock.Controller
	recorder *MockvshnPostgresqlProviderMockRecorder
	isgomock struct{}
}

// MockvshnPostgresqlProviderMockRecorder is the mock recorder for MockvshnPostgresqlProvider.
type MockvshnPostgresqlProviderMockRecorder struct {
	mock *MockvshnPostgresqlProvider
}

// NewMockvshnPostgresqlProvider creates a new mock instance.
func NewMockvshnPostgresqlProvider(ctrl *gomock.Controller) *MockvshnPostgresqlProvider {
	mock := &MockvshnPostgresqlProvider{ctrl: ctrl}
	mock.recorder = &MockvshnPostgresqlProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvshnPostgresqlProvider) EXPECT() *MockvshnPostgresqlProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockvshnPostgresqlProvider) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockvshnPostgresqlProviderMockRecorder) Create(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockvshnPostgresqlProvider) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockvshnPostgresqlProviderMockRecorder) Delete(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Delete), varargs...)
}

// DeleteAllOf mocks base method.
func (m *MockvshnPostgresqlProvider) DeleteAllOf(ctx context.Context, obj client.Object, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOf indicates an expected call of DeleteAllOf.
func (mr *MockvshnPostgresqlProviderMockRecorder) DeleteAllOf(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOf", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).DeleteAllOf), varargs...)
}

// Get mocks base method.
func (m *MockvshnPostgresqlProvider) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockvshnPostgresqlProviderMockRecorder) Get(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Get), varargs...)
}

// GetDynKubeClient mocks base method.
func (m *MockvshnPostgresqlProvider) GetDynKubeClient(ctx context.Context, instance client.Object) (*dynamic.DynamicClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynKubeClient", ctx, instance)
	ret0, _ := ret[0].(*dynamic.DynamicClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynKubeClient indicates an expected call of GetDynKubeClient.
func (mr *MockvshnPostgresqlProviderMockRecorder) GetDynKubeClient(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynKubeClient", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).GetDynKubeClient), ctx, instance)
}

// GetKubeClient mocks base method.
func (m *MockvshnPostgresqlProvider) GetKubeClient(ctx context.Context, instance client.Object) (client.WithWatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeClient", ctx, instance)
	ret0, _ := ret[0].(client.WithWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeClient indicates an expected call of GetKubeClient.
func (mr *MockvshnPostgresqlProviderMockRecorder) GetKubeClient(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeClient", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).GetKubeClient), ctx, instance)
}

// GroupVersionKindFor mocks base method.
func (m *MockvshnPostgresqlProvider) GroupVersionKindFor(obj runtime.Object) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupVersionKindFor", obj)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupVersionKindFor indicates an expected call of GroupVersionKindFor.
func (mr *MockvshnPostgresqlProviderMockRecorder) GroupVersionKindFor(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupVersionKindFor", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).GroupVersionKindFor), obj)
}

// IsObjectNamespaced mocks base method.
func (m *MockvshnPostgresqlProvider) IsObjectNamespaced(obj runtime.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectNamespaced", obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectNamespaced indicates an expected call of IsObjectNamespaced.
func (mr *MockvshnPostgresqlProviderMockRecorder) IsObjectNamespaced(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectNamespaced", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).IsObjectNamespaced), obj)
}

// List mocks base method.
func (m *MockvshnPostgresqlProvider) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, list}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockvshnPostgresqlProviderMockRecorder) List(ctx, list any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, list}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).List), varargs...)
}

// ListVSHNPostgreSQL mocks base method.
func (m *MockvshnPostgresqlProvider) ListVSHNPostgreSQL(ctx context.Context, namespace string) (*v1.VSHNPostgreSQLList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVSHNPostgreSQL", ctx, namespace)
	ret0, _ := ret[0].(*v1.VSHNPostgreSQLList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVSHNPostgreSQL indicates an expected call of ListVSHNPostgreSQL.
func (mr *MockvshnPostgresqlProviderMockRecorder) ListVSHNPostgreSQL(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVSHNPostgreSQL", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).ListVSHNPostgreSQL), ctx, namespace)
}

// Patch mocks base method.
func (m *MockvshnPostgresqlProvider) Patch(ctx context.Context, obj client.Object, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockvshnPostgresqlProviderMockRecorder) Patch(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Patch), varargs...)
}

// RESTMapper mocks base method.
func (m *MockvshnPostgresqlProvider) RESTMapper() meta.RESTMapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTMapper")
	ret0, _ := ret[0].(meta.RESTMapper)
	return ret0
}

// RESTMapper indicates an expected call of RESTMapper.
func (mr *MockvshnPostgresqlProviderMockRecorder) RESTMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapper", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).RESTMapper))
}

// Scheme mocks base method.
func (m *MockvshnPostgresqlProvider) Scheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockvshnPostgresqlProviderMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Scheme))
}

// Status mocks base method.
func (m *MockvshnPostgresqlProvider) Status() client.SubResourceWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(client.SubResourceWriter)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockvshnPostgresqlProviderMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Status))
}

// SubResource mocks base method.
func (m *MockvshnPostgresqlProvider) SubResource(subResource string) client.SubResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubResource", subResource)
	ret0, _ := ret[0].(client.SubResourceClient)
	return ret0
}

// SubResource indicates an expected call of SubResource.
func (mr *MockvshnPostgresqlProviderMockRecorder) SubResource(subResource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubResource", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).SubResource), subResource)
}

// Update mocks base method.
func (m *MockvshnPostgresqlProvider) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockvshnPostgresqlProviderMockRecorder) Update(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Update), varargs...)
}

// Watch mocks base method.
func (m *MockvshnPostgresqlProvider) Watch(ctx context.Context, obj client.ObjectList, opts ...client.ListOption) (watch.Interface, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockvshnPostgresqlProviderMockRecorder) Watch(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).Watch), varargs...)
}
