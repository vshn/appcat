// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apiserver/vshn/postgres/vshnpostgresql.go
//
// Generated by this command:
//
//	mockgen -source=pkg/apiserver/vshn/postgres/vshnpostgresql.go
//

// Package mock_postgres is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/vshn/appcat/v4/apis/vshn/v1"
	gomock "go.uber.org/mock/gomock"
	dynamic "k8s.io/client-go/dynamic"
)

// MockvshnPostgresqlProvider is a mock of vshnPostgresqlProvider interface.
type MockvshnPostgresqlProvider struct {
	ctrl     *gomock.Controller
	recorder *MockvshnPostgresqlProviderMockRecorder
	isgomock struct{}
}

// MockvshnPostgresqlProviderMockRecorder is the mock recorder for MockvshnPostgresqlProvider.
type MockvshnPostgresqlProviderMockRecorder struct {
	mock *MockvshnPostgresqlProvider
}

// NewMockvshnPostgresqlProvider creates a new mock instance.
func NewMockvshnPostgresqlProvider(ctrl *gomock.Controller) *MockvshnPostgresqlProvider {
	mock := &MockvshnPostgresqlProvider{ctrl: ctrl}
	mock.recorder = &MockvshnPostgresqlProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvshnPostgresqlProvider) EXPECT() *MockvshnPostgresqlProviderMockRecorder {
	return m.recorder
}

// GetKubeClient mocks base method.
func (m *MockvshnPostgresqlProvider) GetKubeClient(ctx context.Context, instance v1.VSHNPostgreSQL) (*dynamic.DynamicClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeClient", ctx, instance)
	ret0, _ := ret[0].(*dynamic.DynamicClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeClient indicates an expected call of GetKubeClient.
func (mr *MockvshnPostgresqlProviderMockRecorder) GetKubeClient(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeClient", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).GetKubeClient), ctx, instance)
}

// GetKubeConfig mocks base method.
func (m *MockvshnPostgresqlProvider) GetKubeConfig(ctx context.Context, instance v1.VSHNPostgreSQL) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeConfig", ctx, instance)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeConfig indicates an expected call of GetKubeConfig.
func (mr *MockvshnPostgresqlProviderMockRecorder) GetKubeConfig(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeConfig", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).GetKubeConfig), ctx, instance)
}

// ListVSHNPostgreSQL mocks base method.
func (m *MockvshnPostgresqlProvider) ListVSHNPostgreSQL(ctx context.Context, namespace string) (*v1.VSHNPostgreSQLList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVSHNPostgreSQL", ctx, namespace)
	ret0, _ := ret[0].(*v1.VSHNPostgreSQLList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVSHNPostgreSQL indicates an expected call of ListVSHNPostgreSQL.
func (mr *MockvshnPostgresqlProviderMockRecorder) ListVSHNPostgreSQL(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVSHNPostgreSQL", reflect.TypeOf((*MockvshnPostgresqlProvider)(nil).ListVSHNPostgreSQL), ctx, namespace)
}
